head	1.31;
access;
symbols
	Release_2007_05_12:1.25;
locks
	gyoung:1.31; strict;
comment	@# @;


1.31
date	2008.12.04.17.52.00;	author rblack;	state Exp;
branches;
next	1.30;

1.30
date	2008.12.02.17.27.16;	author rblack;	state Exp;
branches;
next	1.29;

1.29
date	2007.10.19.22.36.37;	author afuqua;	state Exp;
branches;
next	1.28;

1.28
date	2007.06.14.20.12.44;	author afuqua;	state Exp;
branches;
next	1.27;

1.27
date	2007.06.11.14.18.58;	author afuqua;	state Exp;
branches;
next	1.26;

1.26
date	2007.06.09.02.15.34;	author afuqua;	state Exp;
branches;
next	1.25;

1.25
date	2007.05.11.17.09.08;	author rblack;	state Exp;
branches;
next	1.24;

1.24
date	2007.05.11.00.31.19;	author rblack;	state Exp;
branches;
next	1.23;

1.23
date	2007.04.19.22.47.03;	author rblack;	state Exp;
branches;
next	1.22;

1.22
date	2007.04.19.22.46.17;	author rblack;	state Exp;
branches;
next	1.21;

1.21
date	2007.04.19.22.44.09;	author rblack;	state Exp;
branches;
next	1.20;

1.20
date	2007.04.19.05.15.59;	author rblack;	state Exp;
branches;
next	1.19;

1.19
date	2007.04.10.15.43.55;	author rblack;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.04.13.06.27;	author rblack;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.04.12.36.57;	author rblack;	state Exp;
branches;
next	1.16;

1.16
date	2007.04.04.12.26.18;	author rblack;	state Exp;
branches;
next	1.15;

1.15
date	2007.04.04.12.12.36;	author rblack;	state Exp;
branches;
next	1.14;

1.14
date	2007.04.04.12.09.37;	author rblack;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.04.12.05.57;	author rblack;	state Exp;
branches;
next	1.12;

1.12
date	2007.04.04.12.02.15;	author rblack;	state Exp;
branches;
next	1.11;

1.11
date	2007.04.04.11.59.34;	author rblack;	state Exp;
branches;
next	1.10;

1.10
date	2007.04.04.11.24.02;	author rblack;	state Exp;
branches;
next	1.9;

1.9
date	2007.04.04.11.22.42;	author rblack;	state Exp;
branches;
next	1.8;

1.8
date	2007.04.04.11.18.46;	author rblack;	state Exp;
branches;
next	1.7;

1.7
date	2007.04.04.11.17.04;	author rblack;	state Exp;
branches;
next	1.6;

1.6
date	2007.04.04.11.04.09;	author rblack;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.31.19.28.24;	author rblack;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.31.18.25.08;	author rblack;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.18.21.04.31;	author rblack;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.18.19.07.05;	author rblack;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.02.02.47.37;	author rblack;	state Exp;
branches;
next	;


desc
@@


1.31
log
@changed the way we initialize messages
@
text
@package tracker;

import java.io.*;
import java.util.Calendar;
import java.util.Locale;
import java.util.prefs.Preferences;

import javax.swing.UIManager;

/**
 * To compile:
 * 
 * set ANT_HOME=c:\Program Files\Java\jdk1.5.0 ant
 * 
 * To run:
 * 
 * "C:\Program Files\Java\jdk1.5.0\bin\javaw.exe" -classpath "c:\bin\TimeTracker\classes_g;c:\bin\Time Tracker\lib\poi-2.0-RC2.jar" tracker.Tracker
 * 
 * @@author rblack
 */
public class Tracker {
    
    public static void main(String[] args) throws MultipleInstancesException {
        new Tracker(Preferences.userNodeForPackage(Tracker.class)).start( args );
    }
    
    Preferences prefs ;
    String dirName = System.getProperty("user.home") + "/timecards"; //$NON-NLS-1$ //$NON-NLS-2$
    boolean logToConsole = false;
    
    public Tracker(Preferences prefs) {
        this.prefs = prefs;
    }
    
    void start(String[] args) throws MultipleInstancesException {
        parseArguments(args);

        File directory = new File(dirName);
        directory.mkdirs();
        
        setupLogging(directory);

        System.out.println("os: " + System.getProperty("os.name")); //$NON-NLS-1$ //$NON-NLS-2$
        System.out.println("Locale: " + Locale.getDefault()); //$NON-NLS-1$

        AutoStartManager autoStartManager = AutoStartManager.createAutoStartManager();

        install(autoStartManager);

        TimeTracker tracker = new TimeTracker(directory, autoStartManager, prefs);
        tracker.setVisible(true);
    }
    
    void parseArguments(String[] args) {
        for (int i = 0; i < args.length; i++) {
            String arg = args[i];
            if (arg.equals("-d")) { //$NON-NLS-1$
                dirName = args[++i];
            } else if (arg.equals("-update")) { //$NON-NLS-1$
                // update = true;
            } else if (arg.equals("-update-check-frequency")) { //$NON-NLS-1$
                i++;
            } else if (arg.equals("-console")) { //$NON-NLS-1$
                logToConsole = true;
            } else if (arg.equals("-locale")) { //$NON-NLS-1$
                Locale.setDefault(new Locale(args[++i]));
            } else {
                System.out.println("Unrecognized argument " + arg); //$NON-NLS-1$
                usage();
            }
        }
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Throwable e) {
        }
    }
    
    void setupLogging(File directory) {
        if (!logToConsole) {
            File stdOutFile = new File(directory, "stdout.log"); //$NON-NLS-1$
            File stdErrFile = new File(directory, "stderr.log"); //$NON-NLS-1$
            try {
                System.setOut(new PrintStream(new FileOutputStream(stdOutFile)));
                System.setErr(new PrintStream(new FileOutputStream(stdErrFile)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }
    }

  
    
    void install(AutoStart autoStartManager) {
        boolean installed = prefs.getBoolean("installed", false); //$NON-NLS-1$
        if (installed) {
            int firstDayPreference = prefs.getInt("firstDayOfWeek", -1); //$NON-NLS-1$
            if (firstDayPreference == -1) {
                prefs.putInt("firstDayOfWeek", Calendar.SUNDAY); //$NON-NLS-1$
                // This is for backwards compatibility. Versions prior to May 2007 always used Sunday
                // as the 1st day of the week. We don't want everyone to suddenly start using the
                // system 1st day. We want them to be able to control it. If it's not installed
                // yet we should use the system's first day of week. But otherwise, keep using
                // what was used before.
            }
        } else {
            if (autoStartManager != null) {
                autoStartManager.autoStart(true);
            }
            prefs.putBoolean("installed", true); //$NON-NLS-1$
            prefs.putInt("firstDayOfWeek", Calendar.getInstance().getFirstDayOfWeek()); //$NON-NLS-1$
        }
    }

    void usage() {
        System.err.println("Usage: tracker.Tracker [-d <timecard directory>]"); //$NON-NLS-1$
        System.exit(1);
    }
}
@


1.30
log
@organized imports
@
text
@a23 1
        new Messages("messages");
@


1.29
log
@added support for mnemonic character for View, Open and eXit.
@
text
@d3 1
a3 4
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
@


1.28
log
@prevent multiple instances of tiny time tracker from running at the same time
@
text
@d25 1
d27 1
@


1.27
log
@OOPS! my test was blowing away my preferences. I fixed that.
I also added an excludes to the build.xml to keep the test code out of the jar.
@
text
@d25 1
a25 1
    public static void main(String[] args) {
d32 1
a32 1

d37 1
a37 1
    void start(String[] args) {
a44 2
        preventMultipleInstances();

a53 2

        allowOtherInstances();
d93 1
a93 7
    void preventMultipleInstances() {
        // TODO Auto-generated method stub
    }

    void allowOtherInstances() {
        // TODO Auto-generated method stub
    }
@


1.26
log
@refactored Tracker.java:
-- extracted most of the UI stuff to TimeTracker.java,
-- extracted the jnlp/autostart stuff to AutoStartManager.java, and
-- left most of the main()/start-up stuff in Tracker.java
-- refactored Tracker.java for testability
-- write a unit test for most of the stuff in Tracker.java
@
text
@d26 1
a26 1
        new Tracker().start( args );
d29 1
a29 1
    Preferences prefs = Preferences.userNodeForPackage(Tracker.class);
d33 3
a35 1
    public Tracker() {}
@


1.25
log
@fixes from andrew for first day of week
@
text
@a0 5
/*
 * Created on Nov 8, 2004
 *
 * Copyright (c) 2004 iArchives
 */
d3 6
a8 11
import java.awt.*;
import java.awt.event.*;
import java.awt.peer.WindowPeer;
import java.io.*;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;
import java.util.Timer;
import java.util.prefs.BackingStoreException;
d11 1
a11 9
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.plaf.basic.BasicComboPopup;
import javax.swing.plaf.basic.ComboPopup;
import javax.swing.text.JTextComponent;


import com.sun.java.swing.plaf.windows.WindowsComboBoxUI;

d14 1
a14 1
 * To compile: 
d16 1
a16 2
 * set ANT_HOME=c:\Program Files\Java\jdk1.5.0
 * ant
d20 1
a20 1
 * "C:\Program Files\Java\jdk1.5.0\bin\javaw.exe" -classpath "c:\bin\Time Tracker\classes_g;c:\bin\Time Tracker\lib\poi-2.0-RC2.jar" tracker.Tracker 
d24 3
a26 432
public class Tracker extends JDialog {
    public static long lastTimeWrittenToFile = System.currentTimeMillis();
    private final ComboBoxModel model;
    private final JComboBox taskCombo;
    private final JLabel timeLabel = new JLabel("    "); //$NON-NLS-1$
    private final JLabel extraLabel = new JLabel();
    private static Preferences prefs = Preferences.userNodeForPackage(Tracker.class);
    private final File directory;
    private DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); //$NON-NLS-1$
    private Calendar calendar;
    private Week week;
    private static final String enterTaskHere = "<"+  //$NON-NLS-1$
        Messages.getString("Tracker.EnterTaskHere") + //$NON-NLS-1$
        ">"; //$NON-NLS-1$
    private static final long periodMillis = 60000;
    
    private long hideExtraTextMillis;
    private Object mutex = new Object();

    public Tracker(File directory) {
        super((JFrame)null, Messages.getString("Tracker.Title")); //$NON-NLS-1$
        
        initializeCalendar();
        
        setUndecorated(true);
        setAlwaysOnTop(true);
        Mover mover = new Mover();
        timeLabel.setFocusable(true);
        setContentPane(new JPanel() {@@Override
        public Point getToolTipLocation(MouseEvent event) {
            return new Point(getWidth() + 5, event.getY() + 20);
        }});
        ToolTipManager.sharedInstance().setDismissDelay(10000);
        JComponent cp = (JComponent)getContentPane();
        cp.setToolTipText(Messages.getString("Tracker.Tooltip")); //$NON-NLS-1$
        
        cp.addMouseMotionListener(mover);
        cp.addMouseListener(mover);
        
        cp.addMouseWheelListener(new MouseWheelListener() {

            public void mouseWheelMoved(MouseWheelEvent e) {
                ToolTipManager.sharedInstance().setEnabled(false);
                eatIntoPreviousTask(e.getWheelRotation() * ((e.isControlDown() || e.isShiftDown())? 10 : 1));
                ToolTipManager.sharedInstance().setEnabled(true);
            }});
        
        this.directory = directory;
        directory.mkdirs();
        String[] taskArray = loadList();

        if (taskArray == null) {
            taskArray = new String[] {};
        }

        taskCombo = new JComboBox(taskArray);
        taskCombo.setUI(new MyComboBoxUI());
        model = taskCombo.getModel();

        taskCombo.setEditable(true);
        
        addWindowListener(new WindowAdapter() {

//            public void windowActivated(WindowEvent e) {
//
//               Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getPermanentFocusOwner();
//
//               if (focusOwner == getContentPane()) {
//                   taskCombo.requestFocus();
//               }
//            }
            
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }});

        // remove action
        final JPopupMenu comboPopup = new JPopupMenu();
        comboPopup.add(new AbstractAction(Messages.getString("Tracker.RemoveFromDropdown")) { //$NON-NLS-1$
            public void actionPerformed(ActionEvent e) {
                removeCurrentTask();
            }});
        
        ((JTextComponent)taskCombo.getEditor().getEditorComponent()).addKeyListener(new KeyAdapter() {

            public void keyPressed(KeyEvent e) {
                int numModifiers = 0;
                if (e.isControlDown()) numModifiers++;
                if (e.isShiftDown()) numModifiers++;
                if (e.isAltDown()) numModifiers++;
                
                if (numModifiers > 0) {
                    int code = e.getKeyCode();
                    int minutes = numModifiers > 1? 10 : 1;
                    switch(code) {
                        case KeyEvent.VK_UP:
                            eatIntoPreviousTask(-minutes);
                            break;
                        case KeyEvent.VK_DOWN:
                            eatIntoPreviousTask(minutes);
                            break;
                    }
                }
            }});
        
        ((JTextComponent)taskCombo.getEditor().getEditorComponent()).getDocument().addDocumentListener(new DocumentListener() {

            boolean eventPosted;
            
            public void insertUpdate(DocumentEvent e) {
                
                if (!eventPosted) {
                    eventPosted = true;
                    EventQueue.invokeLater(new Runnable() {

                        public void run() {
                            autoComplete();
                            eventPosted = false;
                        }});
                }
            }

            public void removeUpdate(DocumentEvent e) {
            }

            public void changedUpdate(DocumentEvent e) {
            }});
        
        taskCombo.getEditor().getEditorComponent().addMouseListener(new MouseAdapter() {

            @@Override
            public void mouseClicked(MouseEvent e) {
                handleEvent(e);
            }

            @@Override
            public void mousePressed(MouseEvent e) {
                handleEvent(e);
            }

            public void mouseReleased(MouseEvent e) {
                handleEvent(e);
            }

            /**
             * @@param e the event to handle
             */
            private void handleEvent(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    Point p = new Point(e.getPoint());
                    Component comp = e.getComponent();
                    p.translate(-comp.getX(), -comp.getY());
                    comboPopup.show(comp, p.x, p.y);
                }
            }});

        firstDayOfWeekMenu = new JMenu(Messages.getString("Tracker.FirstDayOfWeek")); //$NON-NLS-1$
        ButtonGroup firstDayOfWeekButtonGroup = new ButtonGroup();
        for(int weekDay=1; weekDay<=7; weekDay++)
        {
            final int finalWeekDay = weekDay;
            final JRadioButtonMenuItem weekDayRadio = new JRadioButtonMenuItem(week.getLocalizedDayOfWeekFor(weekDay));
            firstDayOfWeekButtonGroup.add(weekDayRadio);
            weekDayRadio.setSelected(calendar.getFirstDayOfWeek() == weekDay);
            weekDayRadio.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (weekDayRadio.isSelected())
                    {
                        setFirstDayOfWeek(finalWeekDay);
                    }
                }});
            firstDayOfWeekMenu.add(weekDayRadio);
        }
        
        final JPopupMenu mainPopup = new JPopupMenu();

        AbstractAction openTimecardAction = new AbstractAction(Messages.getString("Tracker.OpenTimecard")) { //$NON-NLS-1$
            public void actionPerformed(ActionEvent e) {
                openTimeCard();
            }};
            
        AbstractAction openAllTimecardsAction = new AbstractAction(Messages.getString("Tracker.ViewAllTimecards")) { //$NON-NLS-1$
            public void actionPerformed(ActionEvent e) {
                openAllTimeCards();
            }};
                
        JMenuItem openTimecardItem = mainPopup.add(openTimecardAction);
        Font f = openTimecardItem.getFont();
        openTimecardItem.setFont(new Font(f.getName(), Font.BOLD, f.getSize()));
        mainPopup.add(openAllTimecardsAction);
        
        File startupJnlp = getStartupJnlp();
        if (startupJnlp != null ) {
            autoStartCheckBox.setSelected(startupJnlp.exists());
            mainPopup.add(autoStartCheckBox);
            autoStartCheckBox.addActionListener(new ActionListener() {
                
                public void actionPerformed(ActionEvent e) {
                    autoStart(autoStartCheckBox.isSelected());
                }});
        }
        
        mainPopup.add(firstDayOfWeekMenu);

        mainPopup.add(new AbstractAction(Messages.getString("Tracker.Exit")) { //$NON-NLS-1$
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }});
        
        MouseAdapter mainPopupAdapter = new MouseAdapter() {

            @@Override
            public void mouseClicked(MouseEvent e) {
                handleEvent(e);
            }

            @@Override
            public void mousePressed(MouseEvent e) {
                handleEvent(e);
            }

            @@Override
            public void mouseReleased(MouseEvent e) {
                handleEvent(e);
            }

            /**
             * @@param e
             */
            private void handleEvent(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    Point p = new Point(e.getPoint());
                    Component comp = e.getComponent();
                    p.translate(-comp.getX(), -comp.getY());
                    mainPopup.show(comp, p.x, p.y);
                }
            }};
            
        MouseAdapter doubleClickListener = new MouseAdapter() {

                public void mouseClicked(MouseEvent e) {
                    if (e.getClickCount() == 2) {
                        openTimeCard();
                    }
                }};
                
        cp.addMouseListener(mainPopupAdapter);
        cp.addMouseListener(doubleClickListener);
        
        taskCombo.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {

            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE && !taskCombo.isPopupVisible()) {
                    leavingTracker();
                }
            }
            
        });
        
        //addMouseMotionListener(new Mover());
        //taskCombo.addMouseMotionListener(new Mover());
        taskCombo.getEditor().getEditorComponent().addMouseMotionListener(new Mover());
        
        taskCombo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (e.getActionCommand().equals("comboBoxEdited")) { //$NON-NLS-1$
                    addNewTaskToList();
                }
            }
        });
        
        addWindowFocusListener(new WindowAdapter() {

            public void windowLostFocus(WindowEvent e) {
                leavingTracker();
            }});
        
        taskCombo.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {

            public void focusGained(FocusEvent e) {
                JTextComponent tc = (JTextComponent)taskCombo.getEditor().getEditorComponent();
                tc.selectAll();
            }});
        
        taskCombo.addItemListener(new ItemListener() {

            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED ) {
                    EventQueue.invokeLater(new Runnable() {

                        public void run() {
                            if (!taskCombo.isPopupVisible())
                                addNewTaskToList();
                        }});
                }
            }});
        
        model.addListDataListener(new ListDataListener() {

            public void contentsChanged(ListDataEvent e) {
                saveList();
            }

            public void intervalAdded(ListDataEvent e) {
                saveList();
            }

            public void intervalRemoved(ListDataEvent e) {
                saveList();
            }});
        
        cp.setLayout(new FlowLayout(FlowLayout.LEFT, 0 ,0));
        extraLabel.setVisible(false);
        cp.add(taskCombo);
        cp.add(timeLabel);
        cp.add(extraLabel);
        
        pack();
        // set the location
        int lx = prefs.getInt("window.x", 0); //$NON-NLS-1$
        int ly = prefs.getInt("window.y", 0); //$NON-NLS-1$
        if (lx < 0) lx = 0;
        if (ly < 0) ly = 0;
        Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
        if (lx + getWidth() > ss.width) lx = ss.width - getWidth();
        if (ly + getHeight() > ss.height) ly = ss.height- getHeight();
        
        setLocation(new Point(lx, ly));

        new Timer().scheduleAtFixedRate(new TimerTask() {
            public void run() {
                long scheduledExecutionTime = scheduledExecutionTime();
                tick(scheduledExecutionTime, scheduledExecutionTime + periodMillis);
            }}, 0, periodMillis);

        if (model.getSize() > 0) {
            taskCombo.setSelectedIndex(0);
        }
        else {
            setTaskComboText(enterTaskHere);
        }

        new Timer().schedule(new TimerTask() {
            public void run() {
                WindowPeer wp;
                try {
                    // don't do this if there's a dialog popped up.
                    Window[] ownedWindows = Tracker.this.getOwnedWindows();
                    for (Window window : ownedWindows) {
                        if (window.isVisible())
                        {
                            return;
                        }
                    }
                    wp = (WindowPeer)Component.class.getMethod("getPeer").invoke(Tracker.this); //$NON-NLS-1$
                    wp.updateAlwaysOnTop();
                } catch (Throwable t) {
                    setLabel(t);
                }                
                if (System.currentTimeMillis() > hideExtraTextMillis) {
                    hideExtraText();
                }
            }}, 0, 1 * 1000);
        /*
            new Timer().schedule(new TimerTask() {
                public void run() {
                    checkForUpdates();
                }}, 0, updateCheckFrequency);
         */
    }

    private void setFirstDayOfWeek(int weekDay) {
        boolean doIt = false;
        if (weekDay == calendar.getFirstDayOfWeek())
        {
            // nothing to do, and this prevents us from getting in an infinite event loop
            return;
        }
        if (prefs.getBoolean("warn.firstDayOfWeek", true)) //$NON-NLS-1$
        {
            final JCheckBox dontAskAgain = new JCheckBox(Messages.getString("Tracker.DontAskAgain")); //$NON-NLS-1$
            class Warning extends JPanel
            {
                Warning()
                {
                    super(new BorderLayout());
                    MultiLineLabel label = new MultiLineLabel(Messages.getString("Tracker.ChangingFirstDayInfo"), 400); //$NON-NLS-1$
                    add(label, BorderLayout.CENTER);
                    add(dontAskAgain, BorderLayout.SOUTH);
                }
            };
            Warning warning = new Warning();
            if (JOptionPane.showConfirmDialog(Tracker.this, warning, Messages.getString("Tracker.ChangingFirstDayOfWeek"), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) //$NON-NLS-1$
            {
                doIt = true;
            }
            if (dontAskAgain.isSelected())
            {
                prefs.putBoolean("warn.firstDayOfWeek", false); //$NON-NLS-1$
            }
        }
        else
        {
            doIt = true;
        }
        if (doIt)
        {
            prefs.putInt("firstDayOfWeek", weekDay); //$NON-NLS-1$
            initializeCalendar(); 
            tickNow();
        }
        else
        {
            for(int i=0; i<7; i++)
            {
                final JMenuItem item = firstDayOfWeekMenu.getItem(i);
                if (i+1 == calendar.getFirstDayOfWeek())
                {
                    item.setSelected(true);
                }
            }
        }
    }

    private void initializeCalendar() {
        calendar = Calendar.getInstance();

        int firstDayPreference = prefs.getInt("firstDayOfWeek", 1); //$NON-NLS-1$
        calendar.setFirstDayOfWeek(firstDayPreference);

        week = new Week( calendar.getFirstDayOfWeek() );
        System.out.println("First day of week being used: "+week.getLocalizedDayOfWeekFor(calendar.getFirstDayOfWeek())); //$NON-NLS-1$
d29 3
a31 10
    private void leavingTracker() {
        String currentTask = getCurrentTask();
        if (currentTask == null || currentTask.length()==0) {
            setTaskComboText(enterTaskHere);
        }
        else {
            setTaskComboText(currentTask);
        }
        getContentPane().requestFocus();
    }
d33 1
a33 16
    private void autoComplete() {
        JTextComponent tc = (JTextComponent) taskCombo.getEditor().getEditorComponent();
        String text = tc.getText();
        String textLower = text.toLowerCase();
        int size = model.getSize();
        for (int i=0; i<size; i++) {
            String item = (String) model.getElementAt(i);
            if (item.toLowerCase().startsWith(textLower)) {
                int length = text.length();
                tc.setText(text + item.substring(length));
                tc.setSelectionStart(length);
                tc.setSelectionEnd(item.length());
                return;
            }
        }
    }
d35 2
a36 27
    /**
     * @@param wheelRotation
     */
    private void eatIntoPreviousTask(int minutes) {
        synchronized(mutex)
        {
            try {
                TimecardSpreadsheet timecard = new TimecardSpreadsheet(getWeekFile(System.currentTimeMillis()), System.currentTimeMillis(), week);
                boolean[] beep = new boolean[1];
                TaskRow otherAffectedTask = timecard.moveLastSwitch(minutes * 60, beep);
                if (beep[0]) {
                    beep();
                }
                else {
                    long currentTaskDailyTotal = timecard.save();
                    
                    if (otherAffectedTask != null) {
                        setExtraText(otherAffectedTask.getTask() + ": " +  //$NON-NLS-1$
                                formatTime(Math.round(otherAffectedTask.getDurationMillis() / 1000f)));
                    }
                    showTime(currentTaskDailyTotal);
                }
            } catch (Exception e) {
                setLabel(e);
            }
        }
    }
d38 2
a39 52
    private static void beep() {
        Toolkit.getDefaultToolkit().beep();
    }
    
    private void setTaskComboText(String text) {
        ((JTextComponent)taskCombo.getEditor().getEditorComponent()).setText(text);
    }
    
    private void setLabel(String text) {
        synchronized(mutex)
        {
            timeLabel.setText(" " + text); //$NON-NLS-1$
            pack();
        }
    }
    
    private void setLabel(Throwable t) {
        setLabel(t.getMessage());
        t.printStackTrace();
    }
    
    private void tick(long scheduledExecutionTime, long nextExecutionTime) {
        synchronized(mutex)
        {
            try {
    
                String currentTask = getCurrentTask();
                if (currentTask.length() == 0) {
                    setLabel("     "); //$NON-NLS-1$
                    return;
                }
                
                calendar.setTimeInMillis(scheduledExecutionTime);
                int thisDay = calendar.get(Calendar.DAY_OF_WEEK);
                calendar.setTimeInMillis(nextExecutionTime);
                int nextDay = calendar.get(Calendar.DAY_OF_WEEK);
                
                // see if we should log or we should wait til the next one
                if (System.currentTimeMillis() < nextExecutionTime || thisDay != nextDay) {
                    
                    //System.out.println("Current Task: " + currentTask);
                    
                    TimecardSpreadsheet timecard = new TimecardSpreadsheet(getWeekFile(scheduledExecutionTime), scheduledExecutionTime, week);
                    timecard.tick(currentTask);
                    showTime(timecard.save());
                }
                
            } catch (Exception e) {
                setLabel(e);
            }
        }
    }
d41 1
a41 6
    /**
     * @@param newTime
     */
    private void showTime(long seconds) {
        setLabel(formatTime(seconds));
    }
d43 1
a43 10
    /**
     * @@param time
     * @@return
     */
    private File getWeekFile(long time) {
        calendar.setTimeInMillis(time);
        calendar.set(Calendar.DAY_OF_WEEK, calendar.getFirstDayOfWeek());
        String dateString = df.format(calendar.getTime());
        return new File(directory, "timecard." + dateString + ".xls"); //$NON-NLS-1$ //$NON-NLS-2$
    }
d45 2
a46 22
    protected static String[] loadList()
    { 
        String names[];
        try
        {
            names = prefs.keys();
        }
        catch(BackingStoreException e)
        {
            throw new RuntimeException(e);
        }
        Arrays.sort(names);
        List<String> retVal = new ArrayList<String>(names.length);
        for(int i = 0; i < names.length; i++)
        {
            String name = names[i];
            if(!name.startsWith("task.")) //$NON-NLS-1$
                continue;
            String val = prefs.get(name, ""); //$NON-NLS-1$
            if(val.length() > 0)
                retVal.add(val);
        }
d48 1
a48 6
        String taskArray[] = (String[])(String[])getPrefsObject("taskArray"); //$NON-NLS-1$
        if(retVal.size() > 0)
            return (String[])retVal.toArray(new String[retVal.size()]);
        else
            return taskArray;
    }
d50 1
a50 19
    protected void saveList()
    {
        Set toRemove;
        try
        {
            toRemove = new HashSet<String>(Arrays.asList(prefs.keys()));
        }
        catch(BackingStoreException e)
        {
            throw new RuntimeException(e);
        }
        int itemCount = model.getSize();
        for(int i = 0; i < itemCount; i++)
        {
            String item = (String)model.getElementAt(i);
            String prefName = (new StringBuilder()).append("task.").append(pad(i, 4)).toString(); //$NON-NLS-1$
            prefs.put(prefName, item);
            toRemove.remove(prefName);
        }
d52 2
a53 10
        Iterator i$ = toRemove.iterator();
        do
        {
            if(!i$.hasNext())
                break;
            String prefName = (String)i$.next();
            if(prefName.startsWith("task.")) //$NON-NLS-1$
                prefs.remove(prefName);
        } while(true);
    }
d55 1
a55 75
    public static String pad(int i, int minNumDigits)
    {
        String s;
        for(s = String.valueOf(i); s.length() < minNumDigits; s = (new StringBuilder()).append("0").append(s).toString()); //$NON-NLS-1$
        return s;
    }

    private static Object getPrefsObject(String key) {
        byte[] bytes = prefs.getByteArray(key, null);
        if (bytes != null) {
            try {
                ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
                ObjectInputStream ois = new ObjectInputStream(bais);
                return ois.readObject();
            }
            catch (Exception e) {
                e.printStackTrace();
            } // not fatal
        }
        return null;
    }

    /**
     * 
     */
    protected void addNewTaskToList() {
        
        String currentTask = taskCombo.getEditor().getItem().toString();
        if (currentTask == null || currentTask.equals(enterTaskHere) || currentTask.length()==0) return; // don't add that.
        
        // see if it's already in there ignoring case
        int itemCount = model.getSize();
        for (int i = 0; i < itemCount; i++) {
            String item = (String) model.getElementAt(i);
            if (item.equalsIgnoreCase(currentTask)) {
                currentTask = item;
                break;
            }
        }
        
        Object firstItem = taskCombo.getItemAt(0);
        if (firstItem == null || !firstItem.equals(currentTask)) {
            // put it to the top
            taskCombo.removeItem(currentTask);
            taskCombo.insertItemAt(currentTask, 0);
            taskCombo.setSelectedIndex(0);
            //setTaskComboText(currentTask);

            tickNow();
        }
        
    }

    /**
     * 
     */
    private void tickNow() {
        new Thread() {
            public void run() {
                // hit the file again
                long now = System.currentTimeMillis();
                long nextExecutionTime = lastTimeWrittenToFile + periodMillis;
                if (now < nextExecutionTime) {
                    tick(now, nextExecutionTime);
                }
            }
        }.start();
    }

    private String getCurrentTask() {
        Object item = taskCombo.getSelectedItem();
        if (item == null) return ""; //$NON-NLS-1$
        String currentTask = item.toString().trim();
        if (currentTask.equals(enterTaskHere)) return ""; //$NON-NLS-1$
        return currentTask;
d58 2
a59 4
    public static void main(String[] args) {
        String dirName = System.getProperty("user.home") + "/timecards"; //$NON-NLS-1$ //$NON-NLS-2$
        boolean logToConsole = false;
        for(int i=0; i<args.length; i++) {
d63 3
a65 5
            }
            else if (arg.equals("-update")) { //$NON-NLS-1$
                //update = true;
            }
            else if (arg.equals("-update-check-frequency")) { //$NON-NLS-1$
d67 1
a67 2
            }
            else if (arg.equals("-console")) { //$NON-NLS-1$
d69 1
a69 3
            }
            else if (arg.equals("-locale")) //$NON-NLS-1$
            {
d71 1
a71 2
            }
            else {
d78 1
d80 3
a82 5
        catch (Throwable e) {}
        autoStartCheckBox = new JCheckBoxMenuItem(Messages.getString("Tracker.StartTrackerOnWindowsStartup")); //$NON-NLS-1$
        
        File directory = new File(dirName);
        directory.mkdirs();
d93 11
a103 4
        
        System.out.println("os: " + System.getProperty("os.name")); //$NON-NLS-1$ //$NON-NLS-2$
        System.out.println("Locale: " + Locale.getDefault()); //$NON-NLS-1$
        
d105 1
a105 1
        if( installed ) {
d107 1
a107 1
            if( firstDayPreference == -1 ) {
d116 3
a118 1
            autoStart(true);
a121 69
        
        Tracker tracker = new Tracker(directory);
        tracker.setVisible(true);
    }

    private static void autoStart(boolean autoStart) {
        File startupJnlp = getStartupJnlp();
        if (startupJnlp == null) return;
        if (autoStart) {
            try {
                String jnlpContents = readJNLP();
                if (jnlpContents == null)
                {
                    System.err.println("Autostart setting failed: can't read jnlp from " + jnlpUrl); //$NON-NLS-1$
                    return;
                }
                OutputStreamWriter os = new OutputStreamWriter(new FileOutputStream(startupJnlp), "UTF8"); //$NON-NLS-1$
                try
                {
                    os.write(jnlpContents);
                }
                finally
                {
                    os.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        else {
            startupJnlp.delete();
        }
        autoStartCheckBox.setSelected(startupJnlp.exists());
    }
    
    private static String readJNLP()
    {
        try {
            return readStream(new URL(jnlpUrl).openStream(), "UTF8"); //$NON-NLS-1$
        } catch (Throwable e) {
            System.err.println("Can't read jnlp from " + jnlpUrl); //$NON-NLS-1$
            e.printStackTrace();
            return null;
        } 
    }
    
    private static String readStream(InputStream is, String encoding) throws IOException {
        
        InputStreamReader r;
        
        if (encoding != null)
            r = new InputStreamReader(is, encoding);
        else
            r = new InputStreamReader(is);
        
        return readStream(r);
    }
    
    private static String readStream(Reader reader) throws IOException {
        
        StringBuilder builder = new StringBuilder();
        
        char[] buf = new char [8192];
        int len;
        
        while ((len = reader.read(buf)) > 0)
            builder.append(buf, 0, len);
        
        return builder.toString();
d124 1
a124 18
    private static final String jnlpUrl = "http://tinytimetracker.sourceforge.net/webstart/tinytimetracker.jnlp"; //$NON-NLS-1$
    private static final String jnlpName = "tinytimetracker.jnlp"; //$NON-NLS-1$
    
    private static File getStartupFolder() {
        if (!isWindows()) return null; 
        return new File(System.getProperty("user.home") + "\\Start Menu\\Programs\\Startup"); //$NON-NLS-1$ //$NON-NLS-2$
    }
    
    private static File getStartupJnlp() {
        File startupFolder = getStartupFolder();
        if (startupFolder == null) return null;
        return new File(startupFolder, jnlpName);
    }
    
    /**
     * 
     */
    private static void usage() {
a127 299

    private static String formatTime(long seconds)
    {
        long minutes = seconds / 60;
        long hours = minutes / 60;
        long days = hours / 24;

        seconds %= 60;
        minutes %= 60;
        hours %= 24;

        StringBuffer buf = new StringBuffer();

        if (days > 0) {
            buf.append(days);
            buf.append(':');
        }

        if (hours < 10)
            buf.append('0');
        buf.append(hours);
        buf.append(':');

        if (minutes < 10)
            buf.append('0');
        buf.append(minutes);
//        buf.append(':');
//
//        if (seconds < 10)
//            buf.append('0');
//        buf.append(seconds);

        return buf.toString();
    }
    
    private void openTimeCard() {
        shellExec(getWeekFile(System.currentTimeMillis()).getAbsolutePath(), Messages.getString("Tracker.ErrorViewingTimecard.Message"), Messages.getString("Tracker.ErrorViewingTimecard.Title")); //$NON-NLS-1$ //$NON-NLS-2$
    }
    private void openAllTimeCards() {
        shellExec(getWeekFile(System.currentTimeMillis()).getParentFile().getAbsolutePath(), Messages.getString("Tracker.ErrorViewingDirectory.Message"), Messages.getString("Tracker.ErrorViewingDirectory.Title")); //$NON-NLS-1$ //$NON-NLS-2$
    }
    
    private void shellExec(final String toExec, final String msg, final String title)
    {
        new Thread() {

            public void run()
            {
                try
                {
                    int retValue = shellExec(toExec);
                    if(retValue != 0)
                        EventQueue.invokeLater(new Runnable() {

                            public void run()
                            {
                                JOptionPane.showMessageDialog(Tracker.this, msg, title, 0);
                            }
                        });
                }
                catch(final Throwable t)
                {
                    EventQueue.invokeLater(new Runnable() {

                        public void run()
                        {
                            setLabel(t);
                        }
                    });
                }
            }

        }.start();
    }


    private int shellExec(final String toExec) throws InterruptedException, IOException {
        int retValue = -1;
        if(isWindows()) 
        {
            retValue = StreamCopier.copyProcessStreams(Runtime.getRuntime().exec(new String[] {
                "rundll32", "shell32.dll", "ShellExec_RunDLL", toExec //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            })).waitFor();
        } else
        {
            try
            {
                System.out.println("Trying nautilus"); //$NON-NLS-1$
                retValue = StreamCopier.copyProcessStreams(Runtime.getRuntime().exec(new String[] {
                    "nautilus", "--no-desktop", toExec //$NON-NLS-1$ //$NON-NLS-2$
                })).waitFor();
            }
            catch(IOException e)
            {
                System.out.println((new StringBuilder()).append("nautilus threw an exception: ").append(e).append("Trying kfmclient").toString()); //$NON-NLS-1$ //$NON-NLS-2$
            }
            if(retValue != 0)
            {
                System.out.println((new StringBuilder()).append("nautilus returned ").append(retValue).append(", Trying kfmclient").toString()); //$NON-NLS-1$ //$NON-NLS-2$
                retValue = StreamCopier.copyProcessStreams(Runtime.getRuntime().exec(new String[] {
                    "kfmclient", "exec", toExec //$NON-NLS-1$ //$NON-NLS-2$
                })).waitFor();
                if(retValue == 1)
                    retValue = 0;
            }
        }
        return retValue;
    }

    /**
     * @@return
     */
    private static boolean isWindows() {
        return System.getProperty("os.name").startsWith("Windows"); //$NON-NLS-1$ //$NON-NLS-2$
    }

    /**
     * 
     */
    private void removeCurrentTask() {
        Object selectedItem = taskCombo.getSelectedItem();
        if (selectedItem != null)
            taskCombo.removeItem(selectedItem);
        taskCombo.setSelectedItem(null);
        setTaskComboText(enterTaskHere);
    }

    private class Mover implements MouseMotionListener, MouseListener {

        private Point pressPoint = null;;
        
        /* (non-Javadoc)
         * @@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
         */
        public void mouseDragged(MouseEvent e) {
            if (pressPoint == null) return;
            Point los = getLocationOnScreen();
            Point dragPoint = e.getPoint();
            dragPoint.translate(los.x, los.y);
            int dx = dragPoint.x - pressPoint.x;
            int dy = dragPoint.y - pressPoint.y;
            Point newLocation = new Point(los.x + dx, los.y + dy);
            setLocation(newLocation);
            prefs.putInt("window.x", newLocation.x); //$NON-NLS-1$
            prefs.putInt("window.y", newLocation.y); //$NON-NLS-1$
            
            pressPoint = dragPoint;
        }

        /* (non-Javadoc)
         * @@see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)
         */
        public void mouseMoved(MouseEvent e) {
        }

        /* (non-Javadoc)
         * @@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
         */
        public void mouseClicked(MouseEvent e) {
        }

        /* (non-Javadoc)
         * @@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
         */
        public void mouseEntered(MouseEvent e) {
        }

        /* (non-Javadoc)
         * @@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
         */
        public void mouseExited(MouseEvent e) {
        }

        /* (non-Javadoc)
         * @@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
         */
        public void mousePressed(MouseEvent e) {
            pressPoint = new Point(e.getPoint());
            Point los = getLocationOnScreen();
            pressPoint.translate(los.x, los.y);
            timeLabel.requestFocus();
        }

        /* (non-Javadoc)
         * @@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
         */
        public void mouseReleased(MouseEvent e) {
            pressPoint = null;
        }
        
    }
    
    private class MyComboBoxUI extends WindowsComboBoxUI {
        
        protected ComboPopup createPopup() {
            //ComboPopup comboPopup = super.createPopup();
            return new MyComboPopup(comboBox);
        }
    }
    
    private class MyComboPopup extends BasicComboPopup {

        /**
         * @@param combo
         */
        public MyComboPopup(JComboBox combo) {
            super(combo);
        }
        
        /* (non-Javadoc)
         * @@see javax.swing.plaf.basic.BasicComboPopup#createListMouseListener()
         */
        protected MouseListener createListMouseListener() {
            return new DelegatingMouseListener(super.createListMouseListener());
        }
    }

    private class DelegatingMouseListener implements MouseListener {
        private MouseListener delegate;

        /**
         * @@param delegate
         */
        public DelegatingMouseListener(MouseListener delegate) {
            this.delegate = delegate;
        }
        
        /* (non-Javadoc)
         * @@see java.lang.Object#equals(java.lang.Object)
         */
        public boolean equals(Object obj) {
            return delegate.equals(obj);
        }
        /* (non-Javadoc)
         * @@see java.lang.Object#hashCode()
         */
        public int hashCode() {
            return delegate.hashCode();
        }
        /**
         * @@param e
         */
        public void mouseClicked(MouseEvent e) {
            delegate.mouseClicked(e);
        }
        /**
         * @@param e
         */
        public void mouseEntered(MouseEvent e) {
            delegate.mouseEntered(e);
        }
        /**
         * @@param e
         */
        public void mouseExited(MouseEvent e) {
            delegate.mouseExited(e);
        }
        /**
         * @@param e
         */
        public void mousePressed(MouseEvent e) {
            delegate.mousePressed(e);
        }
        /**
         * @@param e
         */
        public void mouseReleased(MouseEvent e) {
            if (SwingUtilities.isRightMouseButton(e)) {
                final JList list = (JList) e.getComponent();
                final int selectedIndex = list.getSelectedIndex();
                taskCombo.removeItemAt(selectedIndex);
            }
            else {
                delegate.mouseReleased(e);
            }
        }
        /* (non-Javadoc)
         * @@see java.lang.Object#toString()
         */
        public String toString() {
            return delegate.toString();
        }
    }
    
    private static JCheckBoxMenuItem autoStartCheckBox;
    private JMenu firstDayOfWeekMenu;
    
    private void setExtraText(String text) {
        hideExtraTextMillis = System.currentTimeMillis() + 5000;
        extraLabel.setText("     " + text + " "); //$NON-NLS-1$ //$NON-NLS-2$
        extraLabel.setVisible(true);
    }
    
    private void hideExtraText() {
        if (extraLabel.isVisible()) {
            extraLabel.setVisible(false);
            pack();
        }
    }
@


1.24
log
@incorporated Andrew Fuqua's first-day-of-week stuff, and added a UI for it.
@
text
@d52 2
a53 1
    private static final Calendar calendar = initializeCalendar();
d65 2
d204 1
a204 1
            final JRadioButtonMenuItem weekDayRadio = new JRadioButtonMenuItem(Week.getLocalizedDayOfWeekFor(weekDay));
d389 8
a449 1
            calendar.setFirstDayOfWeek(weekDay);
d451 1
d467 5
a471 18
    public static Calendar initializeCalendar() {
      Calendar calendar = Calendar.getInstance();
      
      boolean installed = prefs.getBoolean("installed", false); //$NON-NLS-1$
      int firstDayPreference = prefs.getInt("firstDayOfWeek", -1); //$NON-NLS-1$
      if (installed && firstDayPreference == -1) {
          prefs.putInt("firstDayOfWeek", Calendar.SUNDAY); //$NON-NLS-1$
          calendar.setFirstDayOfWeek(Calendar.SUNDAY);
          // This is for backwards compatibility. Versions prior to May 2007 always used Sunday
          // as the 1st day of the week. We don't want everyone to suddenly start using the
          // system 1st day. We want them to be able to control it. If it's not installed
          // yet we should use the system's first day of week. But otherwise, keep using
          // what was used before
      }
      else if (firstDayPreference >= 1 && firstDayPreference <= 7)
      {
          calendar.setFirstDayOfWeek(firstDayPreference);
      }
d473 2
a474 2
      System.out.println("First day of week being used: "+Week.getLocalizedDayOfWeekFor(calendar.getFirstDayOfWeek())); //$NON-NLS-1$
      return calendar;
d512 1
a512 1
                TimecardSpreadsheet timecard = new TimecardSpreadsheet(getWeekFile(System.currentTimeMillis()), System.currentTimeMillis());
d575 1
a575 1
                    TimecardSpreadsheet timecard = new TimecardSpreadsheet(getWeekFile(scheduledExecutionTime), scheduledExecutionTime);
d787 1
a789 3
        Tracker tracker = new Tracker(directory);
        tracker.setVisible(true);
        
d791 11
a801 1
        if (!installed) {
d804 1
d806 3
d881 1
a881 3
        String os = System.getProperty("os.name"); //$NON-NLS-1$
        System.out.println("os: " + os); //$NON-NLS-1$
        if (!os.startsWith("Windows")) return null; //$NON-NLS-1$
d976 1
a976 1
        if(System.getProperty("os.name").startsWith("Windows")) //$NON-NLS-1$ //$NON-NLS-2$
d1008 7
a1196 4

    public static Calendar getCalendar() {
        return calendar;
    }
@


1.23
log
@*** empty log message ***
@
text
@a11 1
import java.lang.reflect.Method;
a12 1
import java.nio.channels.FileLock;
a26 4
import org.apache.poi.hssf.model.FormulaParser;
import org.apache.poi.hssf.model.Workbook;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.hssf.util.CellReference;
d44 1
a44 1

d52 1
a52 1
    private Calendar calendar = Calendar.getInstance();
d57 1
a57 4
    private long lastTimeWrittenToFile = System.currentTimeMillis();
    DateFormat dowFormat = new SimpleDateFormat("EEEE"); //$NON-NLS-1$
    DateFormat englishDowFormat = new SimpleDateFormat("EEEE", Locale.ENGLISH); //$NON-NLS-1$
    private String[] dow;
d61 1
a61 1
    public Tracker(File directory, boolean update) {
a63 15
        calendar.setFirstDayOfWeek(Calendar.SUNDAY);
        
        // initialize localized days of week
        dow = new String[] {
                getLocalizedWeekDay(Calendar.SUNDAY),
                getLocalizedWeekDay(Calendar.MONDAY),
                getLocalizedWeekDay(Calendar.TUESDAY),
                getLocalizedWeekDay(Calendar.WEDNESDAY),
                getLocalizedWeekDay(Calendar.THURSDAY),
                getLocalizedWeekDay(Calendar.FRIDAY),
                getLocalizedWeekDay(Calendar.SATURDAY),
        };
        
        System.out.println("Days of week:" + Arrays.asList(dow)); //$NON-NLS-1$
        
d195 18
a213 1
        // exit action
d242 2
d353 3
a355 8
        if (update) {
            cp.add(new JLabel("Updating...")); //$NON-NLS-1$
        }
        else {
            cp.add(taskCombo);
            cp.add(timeLabel);
            cp.add(extraLabel);
        }
d369 27
a395 28
        if (!update) {
            new Timer().scheduleAtFixedRate(new TimerTask() {
                public void run() {
                    long scheduledExecutionTime = scheduledExecutionTime();
                    tick(scheduledExecutionTime, scheduledExecutionTime + periodMillis);
                }}, 0, periodMillis);
            
            if (model.getSize() > 0) {
                taskCombo.setSelectedIndex(0);
            }
            else {
                setTaskComboText(enterTaskHere);
            }
            
            new Timer().schedule(new TimerTask() {
                public void run() {
                    WindowPeer wp;
                    try {
                        wp = (WindowPeer)Component.class.getMethod("getPeer").invoke(Tracker.this); //$NON-NLS-1$
                        wp.updateAlwaysOnTop();
                    } catch (Throwable t) {
                        setLabel(t);
                    }                
                    if (System.currentTimeMillis() > hideExtraTextMillis) {
                        hideExtraText();
                    }
                }}, 0, 1 * 1000);
            /*
d400 1
a400 2
            */
        }
a401 4
    
    private String getLocalizedWeekDay(int value) {
        calendar.set(Calendar.DAY_OF_WEEK, value);
        String day = dowFormat.format(calendar.getTime());
d403 35
a437 2
        // make sure it parses -- 
        try
d439 3
a441 3
            String formula = "SUM('"+day+"'!A1:A65000)"; //$NON-NLS-1$ //$NON-NLS-2$ 
            FormulaParser fp = new FormulaParser(formula + ";", new Workbook());
            fp.parse();
d443 1
a443 1
        catch (Exception e)
d445 8
a452 5
            String englishDay = englishDowFormat.format(calendar.getTime());
            System.err.println("The localized day of week " + day + //$NON-NLS-1$ 
                    " is not suitable as an excel sheet name.  Reverting to the English" + //$NON-NLS-1$
                    " representation. " + englishDay); //$NON-NLS-1$
            day = englishDay;
d454 23
a476 2
        
        return day;
a478 3
    /**
     * 
     */
d514 1
a514 1
                TimecardSpreadsheet timecard = new TimecardSpreadsheet(System.currentTimeMillis());
a555 19
//    protected void renameTask() {
//        String currentTask = getCurrentTask();
//        if (currentTask.length() == 0) JOptionPane.showMessageDialog(this, "Can't rename: no task selected");
//        String newTask = JOptionPane.showInputDialog("Enter new name for " + currentTask);
//        if (newTask != null && newTask.length() > 0) {
//            synchronized (this) {
//                renameFrom = currentTask;
//                renameTo = newTask;
//                removeCurrentTask();
//                setTaskComboText(newTask);
//                addNewTaskToList();
//            }
//        }
//    }
//    
    /**
     * @@param scheduledExecutionTime
     * 
     */
d577 1
a577 2
                    TimecardSpreadsheet timecard = new TimecardSpreadsheet(scheduledExecutionTime);
                    
a578 1
                    
a581 1
                
a586 493

    private class TimecardSpreadsheet {
        private final HSSFSheet timecardSheet;
        private HSSFWorkbook wb;
        private final File f;
        private final File tmpFile;
        private HSSFCellStyle elapsedTimeStyle, hmsStyle;

        private short taskColumn;
        private short totalTimeColumn;
        private HSSFRow headingRow;
        private HSSFSheet daySheet;
        private final long scheduledExecutionTime;
//        private String lastTask;
//        private Date lastEnd, lastStart, secondToLastEnd, secondToLastStart;
        private TaskRow lastTaskRow, secondToLastTaskRow;
        //private HSSFCell lastEndCell, lastStartCell, secondToLastEndCell, secondToLastStartCell;
        private String currentTask;
        
        public TimecardSpreadsheet(long scheduledExecutionTime) throws IOException {
            this.scheduledExecutionTime = scheduledExecutionTime;
            f = getWeekFile(scheduledExecutionTime);
            tmpFile = new File(f.toString() + ".tmp"); //$NON-NLS-1$

            String elapsedTimeFormatString = "[h]:mm"; //$NON-NLS-1$
            String hmsFormatString = "h:mm:ss"; //$NON-NLS-1$
            
            if (!f.isFile()) {
                // doesn't exist, create it.
                wb = new HSSFWorkbook();
                timecardSheet = wb.createSheet(Messages.getString("Tracker.Timecard")); //$NON-NLS-1$
                HSSFRow row = timecardSheet.createRow(0);
                HSSFFont boldFont = wb.createFont();
                boldFont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

                HSSFCellStyle headerStyle = wb.createCellStyle();
                headerStyle.setFont(boldFont);
                
                timecardSheet.setDefaultColumnWidth((short) 12);

                createCell(row, Messages.getString("Tracker.Task"), headerStyle); //$NON-NLS-1$
                createCell(row, Messages.getString("Tracker.Total"), headerStyle); //$NON-NLS-1$
                
                for (int i = 0; i < dow.length; i++) {
                    String day = dow[i];
                    createCell(row, day, headerStyle);
                }
                
                short elapsedTimeFormatIndex = wb.createDataFormat().getFormat(elapsedTimeFormatString);
                elapsedTimeStyle = wb.createCellStyle();
                elapsedTimeStyle.setDataFormat(elapsedTimeFormatIndex);
                
                HSSFCellStyle underlineTimeStyle = wb.createCellStyle();
                underlineTimeStyle.setDataFormat(elapsedTimeFormatIndex);
                underlineTimeStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
                
                HSSFRow row2 = timecardSheet.createRow(1);
                createCell(row2, Messages.getString("Tracker.DailyTotals"), underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(C2:I2)", underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(C3:C10000)", underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(D3:D10000)", underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(E3:E10000)", underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(F3:F10000)", underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(G3:G10000)", underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(H3:H10000)", underlineTimeStyle); //$NON-NLS-1$
                createFormulaCell(row2, "SUM(I3:I10000)", underlineTimeStyle); //$NON-NLS-1$

                for (int i = 0; i < dow.length; i++) {
                    String day = dow[i];
                    createDaySheet(day, headerStyle);
                }
                
            } else {
                if (tmpFile.exists()) {
                    FileInputStream fis = new FileInputStream(tmpFile);
                    try {
                        wb = new HSSFWorkbook(fis);
                    }
                    catch (Throwable t) {
                        // we'll try again below
                    }
                    finally {
                        fis.close();
                    }
                }
                if (wb == null) {
                    FileInputStream fis = new FileInputStream(f);
                    try {
                        wb = new HSSFWorkbook(fis);
                    }
                    finally {
                        fis.close();
                    }
                }
                timecardSheet = wb.getSheetAt(0);
            }

            if (elapsedTimeStyle == null) {
                elapsedTimeStyle = findStyle(elapsedTimeFormatString);
            }
            
            if (hmsStyle == null) {
                hmsStyle = findStyle(hmsFormatString);
            }
            
            if (hmsStyle == null) {
                hmsStyle = wb.createCellStyle();
                hmsStyle.setDataFormat((short)0x15);
            }
            
            if (elapsedTimeStyle == null) {
                short elapsedTimeFormatIndex = wb.createDataFormat().getFormat(elapsedTimeFormatString);
                elapsedTimeStyle = wb.createCellStyle();
                elapsedTimeStyle.setDataFormat(elapsedTimeFormatIndex);
            }
            
            taskColumn = -1;
            totalTimeColumn = -1;
            
            Iterator rowIterator = timecardSheet.rowIterator();
            while (rowIterator.hasNext() && !(taskColumn >= 0 || totalTimeColumn >= 0)) {
                HSSFRow row = (HSSFRow)rowIterator.next();
                Iterator cellIterator = row.cellIterator();
                while (cellIterator.hasNext() && (totalTimeColumn == -1 || taskColumn == -1)) {
                    HSSFCell cell = (HSSFCell) cellIterator.next();
                    if (cell.getStringCellValue().equals(Messages.getString("Tracker.Task"))) { //$NON-NLS-1$
                        taskColumn = cell.getCellNum();
                        headingRow = row;
                    }
                    else if (cell.getStringCellValue().equals(Messages.getString("Tracker.Total"))) { //$NON-NLS-1$
                        totalTimeColumn = cell.getCellNum();
                        headingRow = row;
                    }
                }
            }
            
            if (taskColumn == -1) taskColumn = 0;
            if (totalTimeColumn == -1) totalTimeColumn = 1;

            calendar.setTimeInMillis(scheduledExecutionTime);

            int dowOffset = calendar.get(Calendar.DAY_OF_WEEK);
            daySheet = wb.getSheetAt(dowOffset);

            lastTaskRow = getTaskRowOnOrBefore(daySheet.getLastRowNum());
            if (lastTaskRow != null) {
                currentTask = lastTaskRow.getTask();
                secondToLastTaskRow = getTaskRowOnOrBefore(lastTaskRow.getRowNum() - 1);
            }
/*            
            // find wrap style
            short numCellStyles = wb.getNumCellStyles();
            for(short i=0; i<numCellStyles; i++) {
                HSSFCellStyle thestyle = wb.getCellStyleAt(i);
                if (thestyle.getWrapText()) {
                    wrapStyle = thestyle;
                }
            }
            if (wrapStyle == null) {
                wrapStyle = wb.createCellStyle();
                wrapStyle.setWrapText(true);
            }
*/
        }
        
        private TaskRow getTaskRowOnOrBefore(int rowNum) {
            while (rowNum >= 1) {
                HSSFRow row = daySheet.getRow(rowNum);
                if (row != null) {
                    try {
                        return new TaskRow(row);
                    }
                    catch (Throwable t) {}
                }
                rowNum--;
            }
            return null;
        }
        
        /**
         * @@param formatString
         */
        private HSSFCellStyle findStyle(String formatString) {
            // find the style
            short numCellStyles = wb.getNumCellStyles();
            for(short i=0; i<numCellStyles; i++) {
                HSSFCellStyle thestyle = wb.getCellStyleAt(i);
                short dataFormat = thestyle.getDataFormat();
                String format = wb.createDataFormat().getFormat(dataFormat);
                if (format.equals(formatString) && thestyle.getBorderBottom() == HSSFCellStyle.BORDER_NONE) {
                    return thestyle;
                }
            }
            return null;
        }

        private void createDaySheet(String day, HSSFCellStyle headerStyle) {
            HSSFSheet daySheet = wb.createSheet(day);
            daySheet.setDefaultColumnWidth((short)12);
            //daySheet.setColumnWidth((short)4, (short)(80 * 256));
            HSSFRow headingRow = daySheet.createRow(0);
            createCell(headingRow, Messages.getString("Tracker.Task"), headerStyle); //$NON-NLS-1$
            createCell(headingRow, Messages.getString("Tracker.Start"), headerStyle); //$NON-NLS-1$
            createCell(headingRow, Messages.getString("Tracker.End"), headerStyle); //$NON-NLS-1$
            createCell(headingRow, Messages.getString("Tracker.Duration"), headerStyle); //$NON-NLS-1$
            //createCell(headingRow, "Details", headerStyle);
        }
        
        /**
         * 
         * @@param seconds
         * @@param beep This is an "out" parameter.  Pass in a an array of length 1, and this
         * method will set beep[0] = true if the operation was unsuccessful.  
         * @@return The previous task, or null if time cannot be adjusted
         */
        public TaskRow moveLastSwitch(int seconds, boolean[] beep) {
            
            beep[0] = true;
            
            if (lastTaskRow == null) return null;
            
            Date limit;
            if (secondToLastTaskRow != null) {
                limit = secondToLastTaskRow.getStart();
            }
            else {
                calendar.setTimeInMillis(scheduledExecutionTime);
                calendar.set(Calendar.HOUR_OF_DAY, 0);
                calendar.set(Calendar.MINUTE, 0);
                calendar.set(Calendar.SECOND, 0);
                limit = calendar.getTime();
            }
            
            if (!lastTaskRow.getStart().after(limit) && seconds < 0) return null;
            
            if (lastTaskRow.getDurationMillis() <= 0 && seconds > 0) return null;

            Date newLastStart = new Date(lastTaskRow.getStart().getTime() + seconds * 1000);
            if (newLastStart.before(limit)) newLastStart = limit;
            
            
            if (newLastStart.after(lastTaskRow.getEnd())) newLastStart = lastTaskRow.getEnd();

            boolean linked = secondToLastTaskRow != null && lastTaskRow.getStart().equals(secondToLastTaskRow.getEnd());
            
            lastTaskRow.setStart(newLastStart);
            if (linked || secondToLastTaskRow != null && newLastStart.before(secondToLastTaskRow.getEnd())) {
                secondToLastTaskRow.setEnd(newLastStart);
            }
            beep[0] = false;
            return secondToLastTaskRow;
        }
        
        public void tick(String task) {
            
            Date now = new Date(scheduledExecutionTime);
            String currentWindowTitle = null;//getCurrentWindowTitle();
            if (currentWindowTitle != null && currentWindowTitle.equals(getTitle())) currentWindowTitle = null; // ignore this
            
            // see if we should make a new row

            if (lastTaskRow == null || !lastTaskRow.getTask().equals(task) || lastTaskRow.getEnd() == null ||
                    lastTimeWrittenToFile > lastTaskRow.getEnd().getTime() ) {
                
                int newRowNum = daySheet.getLastRowNum()+1;

                HSSFRow newRow = daySheet.createRow(newRowNum);
                
                createCell(newRow, task, null);
                createCell(newRow, new Date(lastTimeWrittenToFile), hmsStyle);
                createCell(newRow, now, hmsStyle);
                createFormulaCell(newRow, "C" + (newRowNum+1) + "-" + "B" + (newRowNum+1), elapsedTimeStyle); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                //createCell(newRow, currentWindowTitle == null? "" : currentWindowTitle, wrapStyle); //details
            }
            else {
                // just change the end time of the last row
                lastTaskRow.setEnd(now);

                // update the details
                /*
                if (currentWindowTitle != null) {
                    
                    // see if we need to change it
                    String details = lastTaskRow.getDetails();
                    if (!details.equals(currentWindowTitle) && !details.startsWith(currentWindowTitle + "\n")) {
                        StringTokenizer st = new StringTokenizer(details, "\n");
                        StringBuffer newDetails = new StringBuffer(currentWindowTitle);
                        while (st.hasMoreTokens()) {
                            String title = st.nextToken();
                            if (!title.equals(currentWindowTitle)) {
                                newDetails.append("\n").append(title);
                            }
                        }
                        lastTaskRow.setDetails(newDetails.toString());
                    }
                }
                */
            }
            
            lastTimeWrittenToFile = scheduledExecutionTime;
            
            // make sure the task appears on the timecard sheet

            Iterator rowIterator = timecardSheet.rowIterator();

            boolean found = false;
            while (rowIterator.hasNext()) {
                HSSFRow row = (HSSFRow)rowIterator.next();
                if (row.getRowNum() <= headingRow.getRowNum()) continue;
                
                HSSFCell taskCell = row.getCell(taskColumn);
                if (taskCell != null) {
                    String taskName = taskCell.getStringCellValue();
                    if (taskName.equalsIgnoreCase(task)) {
                        found = true;
                    }
                }
            }
            
            if (!found) {
                HSSFRow nextAvailableRow = timecardSheet.createRow(timecardSheet.getLastRowNum() + 1);
                
                HSSFCell taskCell = nextAvailableRow.createCell(taskColumn);
                taskCell.setCellValue(task);
                
                CellReference sunday = new CellReference(nextAvailableRow.getRowNum(), totalTimeColumn + 1);
                CellReference saturday = new CellReference(nextAvailableRow.getRowNum(), totalTimeColumn + 7);
                
                createFormulaCell(nextAvailableRow, "SUM(" + sunday + ":" + saturday + ")", elapsedTimeStyle); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                
                //CellReference taskCellReference = new CellReference(nextAvailableRow.getRowNum(), taskColumn);
                
                for (int i = 0; i < dow.length; i++) {
                    String day = dow[i];
                    String formula = "SUMIF('"+day+"'!A1:A65000,\""+task+"\",'"+day+"'!D1:D65000)"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
                    createFormulaCell(nextAvailableRow, formula, elapsedTimeStyle);
                }
                
            }
            
            currentTask = task;
            
        }
        
        /**
         * Saves the file and returns the number of seconds attributed to the current task.
         * @@return
         * @@throws IOException
         */
        public long save() throws IOException {
            long millis = 0;
            Iterator rowIterator = daySheet.rowIterator();
            while (rowIterator.hasNext()) {
                HSSFRow row = (HSSFRow)rowIterator.next();
                if (row.getRowNum() <= 0) continue; // skip the heading row
                
                try {
                    TaskRow taskRow = new TaskRow(row);
                    if (taskRow.getTask().equals(currentTask)) {
                        millis += taskRow.getDurationMillis();
                    }
                }
                catch (Throwable t) {
                    t.printStackTrace();
                }

            }
            FileOutputStream fos = new FileOutputStream(tmpFile);
            try {
                wb.write(fos);
            }
            finally {
                fos.close();
            }
            f.delete();
            tmpFile.renameTo(f);
            return Math.round((float)millis/1000);
        }

        /**
         * @@param row
         * @@param style
         * @@return
         */
        private HSSFCell createCell(HSSFRow row, String text, HSSFCellStyle style) {
            short lastCellNum = row.getLastCellNum();
            HSSFCell cell = row.createCell((short) (lastCellNum+1));
            if (style != null) cell.setCellStyle(style);
            cell.setCellValue(text);
            return cell;
        }

        /**
         * @@param row
         * @@param style
         * @@return
         */
        private HSSFCell createCell(HSSFRow row, Date date, HSSFCellStyle style) {
            short lastCellNum = row.getLastCellNum();
            HSSFCell cell = row.createCell((short) (lastCellNum+1));
            if (style != null) cell.setCellStyle(style);
            cell.setCellValue(date);
            return cell;
        }

        /**
         * @@param row
         * @@param style
         * @@return
         */
        private HSSFCell createFormulaCell(HSSFRow row, String formula, HSSFCellStyle style) {
            short lastCellNum = row.getLastCellNum();
            HSSFCell cell = row.createCell((short) (lastCellNum+1));
            if (style != null) cell.setCellStyle(style);
            cell.setCellFormula(formula);
            return cell;
        }
    }
    
    private class TaskRow {
        
        private HSSFCell taskCell, startCell, endCell /*, detailsCell */;
        private String task;
        private Date start, end;
        //private String details;
        private final HSSFRow row;
        
        public TaskRow(HSSFRow row) {
            this.row = row;
            
            taskCell = row.getCell((short)0);
            task = taskCell.getStringCellValue();

            startCell = row.getCell((short)1);
            start = startCell.getDateCellValue();
            
            endCell = row.getCell((short)2);
            end = endCell.getDateCellValue();
/*            
            detailsCell = row.getCell((short)4);
            if (detailsCell != null) {
                details = detailsCell.getStringCellValue();
            }
            else {
                details = "";
            }
*/
        }

        public int getRowNum() {
            return row.getRowNum();
        }
        
        public long getDurationMillis() {
            return end.getTime() - start.getTime();
        }
        
        public void setEnd(Date end) {
            this.end = end;
            endCell.setCellValue(end);
        }
        
        public void setStart(Date start) {
            this.start = start;
            startCell.setCellValue(start);
        }
        
        
//        public void setDetails(String details) {
//            this.details = details;
//            if (detailsCell != null) {
//                detailsCell.setCellValue(details);
//            }
//        }
        /**
         * @@return Returns the task.
         */
        public String getTask() {
            return task;
        }
        /**
         * @@return Returns the start.
         */
        public Date getStart() {
            return start;
        }
        
        /**
         * @@return Returns the end.
         */
        public Date getEnd() {
            return end;
        }
a587 5
        public String toString() {
            return task + " " + start + " - " + end; //$NON-NLS-1$ //$NON-NLS-2$
        }
    }
    
d601 1
a601 1
        calendar.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);
d607 1
a607 1
    {
d622 1
a622 1
            if(!name.startsWith("task."))
d624 1
a624 1
            String val = prefs.get(name, "");
d629 1
a629 1
        String taskArray[] = (String[])(String[])getPrefsObject("taskArray");
d651 1
a651 1
            String prefName = (new StringBuilder()).append("task.").append(pad(i, 4)).toString();
d662 1
a662 1
            if(prefName.startsWith("task."))
d670 1
a670 1
        for(s = String.valueOf(i); s.length() < minNumDigits; s = (new StringBuilder()).append("0").append(s).toString());
a706 1
        
d715 1
a715 10
            new Thread() {
                public void run() {
                    // hit the file again
                    long now = System.currentTimeMillis();
                    long nextExecutionTime = lastTimeWrittenToFile + periodMillis;
                    if (now < nextExecutionTime) {
                        tick(now, nextExecutionTime);
                    }
                }
            }.start();
d720 16
a745 1
        boolean update = false;
d753 1
a753 1
                update = true;
d761 1
a761 1
            else if (arg.equals("-locale"))
d791 1
a791 1
        Tracker tracker = new Tracker(directory, update);
a792 4
        if (update) {
            updateAndRelaunch(dirName);
            System.exit(0);
        }
d809 1
a809 1
                    System.err.println("Autostart setting failed: can't read jnlp from " + jnlpUrl);
d812 1
a812 1
                OutputStreamWriter os = new OutputStreamWriter(new FileOutputStream(startupJnlp), "UTF8");
d834 1
a834 1
            return readStream(new URL(jnlpUrl).openStream(), "UTF8");
d836 1
a836 1
            System.err.println("Can't read jnlp from " + jnlpUrl);
d867 1
a867 1
    private static final String jnlpUrl = "http://tinytimetracker.sourceforge.net/webstart/tinytimetracker.jnlp";
d968 1
a968 1
        if(System.getProperty("os.name").startsWith("Windows"))
d971 1
a971 1
                "rundll32", "shell32.dll", "ShellExec_RunDLL", toExec
d977 1
a977 1
                System.out.println("Trying nautilus");
d979 1
a979 1
                    "nautilus", "--no-desktop", toExec
d984 1
a984 1
                System.out.println((new StringBuilder()).append("nautilus threw an exception: ").append(e).append("Trying kfmclient").toString());
d988 1
a988 1
                System.out.println((new StringBuilder()).append("nautilus returned ").append(retValue).append(", Trying kfmclient").toString());
d990 1
a990 1
                    "kfmclient", "exec", toExec
a1076 3
        /* (non-Javadoc)
         * @@see javax.swing.plaf.basic.BasicComboBoxUI#createPopup()
         */
a1165 27
    //private static final DateFormat cvsDateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss z");
    private static String javawExe = System.getProperty("java.home") + File.separatorChar + "bin" + File.separatorChar + "javaw"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
    private static File jarFileCache;
    
    private static File getJarFile() {
        if (jarFileCache == null) {
            try {
                URL classURL = getClassURL();

                if (classURL == null) return null;
                String url = classURL.toString();
                if (url.startsWith("jar:")) { //$NON-NLS-1$
                    int exclamationIndex = url.lastIndexOf('!');
                    if (exclamationIndex >= 0) {
                        if (url.charAt(9) != '/') {
                            url = url.substring(0, 9) + "/" + url.substring(9); //$NON-NLS-1$
                        }
                        URL jarURL = new URL(url.substring(4, exclamationIndex));
                        jarFileCache = new File(jarURL.toURI());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return jarFileCache;
    }
d1168 1
a1168 80
    
    private static Process runJava(String[] args) throws IOException {
        String[] commandLine = new String[args.length+1];
        System.arraycopy(args, 0, commandLine, 1, args.length);
        commandLine[0] = javawExe;
        return Runtime.getRuntime().exec(commandLine);
    }

    private static void updateAndRelaunch(String dirName) {
        File jarFile = getJarFile();
        
        try {
            int tries = 0;
            while (true) {
                tries++;
                FileOutputStream os = new FileOutputStream(jarFile, true);
                try {
                    // see if we can get a lock on this file
                    FileLock lock = os.getChannel().tryLock();
                    if (lock == null) {
                        try {
                            Thread.sleep(500);
                        }catch (InterruptedException e) {}
                    }
                    else {
                        lock.release();
                        break;
                    }
                }
                finally {
                    os.close();
                }
                if (tries > 20) {
                    throw new Exception("Unable to get write lock on file " + jarFile + " for update"); //$NON-NLS-1$ //$NON-NLS-2$
                }
            }

            Process p = Runtime.getRuntime().exec(new String[] { "cvs", "update", "-A", }, null, jarFile.getParentFile().getParentFile()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
            StreamCopier.copyProcessStreams(p);
            int retVal = p.waitFor();
            if (retVal != 0)
                throw new Exception("CVS update returned with error code " + retVal); //$NON-NLS-1$
            
        }
        catch (Throwable e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.toString(), "CVS update failed.  Will attempt to restart tracker.", JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$
        }
        
        // launch another jvm
        File updatedJar = new File(jarFile.getParentFile(), "tracker.jar"); //$NON-NLS-1$
        
        try {
            Process p = runJava(new String[] { "-jar", updatedJar.toString(), "-d", dirName}); //$NON-NLS-1$ //$NON-NLS-2$
            StreamCopier.copyProcessStreams(p);
        }
        catch (Throwable e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, e.toString(), "Unable to restart tracker.", JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$
        }
        
    }
    
    /**
     * @@return
     */
    private static URL getClassURL() {
        ClassLoader cl = Tracker.class.getClassLoader();
        Method m;
        try {
            m = cl.getClass().getMethod("findResource", new Class[] {String.class}); //$NON-NLS-1$
            if (!m.getReturnType().equals(URL.class)) return null;
            String name = Tracker.class.getName();
            String path = name.replace('.', '/').concat(".class"); //$NON-NLS-1$
            return (URL)m.invoke(cl, new Object[] {path});
        }
        catch (Throwable t) {
            return null;
        }
    }
d1182 4
@


1.22
log
@UTF8 encoding for JNLP
@
text
@d1317 1
a1317 1
            System.err.println("Can't read jnlp from server");
@


1.21
log
@Changed autostart implementation for Java 6
@
text
@d1293 1
a1293 1
                OutputStreamWriter os = new OutputStreamWriter(new FileOutputStream(startupJnlp), "Cp1252");
d1315 1
a1315 1
            return readStream(new URL(jnlpUrl).openStream(), "Cp1252");
@


1.20
log
@better prefs usage
@
text
@a63 1
    private static final WebstartInfo webstartInfo = new WebstartInfo();
d239 1
a239 1
        if (webstartInfo.isWebstart() && startupJnlp != null ) {
d1286 15
a1300 5
            if (webstartInfo.isWebstart()) {
                try {
                    copyFile(startupJnlp, webstartInfo.AMTinyTimeTracker_jnlp);
                } catch (IOException e) {
                    e.printStackTrace();
d1302 2
a1303 3
            }
            else {
                System.out.println("Not installing, not webstart"); //$NON-NLS-1$
d1312 12
a1323 1
    private static void copyFile(File destFile, File src) throws IOException {
d1325 1
a1325 1
        File destDir = destFile.getParentFile();
d1327 4
a1330 1
        destDir.mkdirs();
d1332 4
a1335 1
        InputStream is = new FileInputStream(src);
d1337 1
a1337 2
        try { 
            FileOutputStream os = new FileOutputStream(destFile);
d1339 5
a1343 14
            try {
                byte[] buf = new byte [8192];
                int len;
            
                while ((len = is.read(buf)) > 0)
                    os.write(buf, 0, len);
            }
            finally {
                os.close();
            }
        }
        finally {
            is.close();
        }
d1345 1
d1348 2
a1349 1
    private static String jnlpName = "tinytimetracker.jnlp"; //$NON-NLS-1$
a1677 19
    private static class WebstartInfo {
        File AMTinyTimeTracker_jnlp, RTTinyTimeTracker_jar;
        
        /**
         * @@param tracker_jnlp
         * @@param tracker_jar
         */
        public WebstartInfo() {
            File jarFile = getJarFile();
            if (jarFile == null) return;
            AMTinyTimeTracker_jnlp = new File(jarFile.getParentFile(), "AMtinytimetracker.jnlp"); //$NON-NLS-1$
            RTTinyTimeTracker_jar = new File(jarFile.getParentFile(), "RTtinytimetracker.jar"); //$NON-NLS-1$
        }
        
        public boolean isWebstart() {
            return AMTinyTimeTracker_jnlp != null && AMTinyTimeTracker_jnlp.isFile() && RTTinyTimeTracker_jar != null && RTTinyTimeTracker_jar.isFile();
        }
    }

@


1.19
log
@backwards compatibility problem
@
text
@d20 1
d114 1
a114 1
        String[] taskArray = (String[]) getPrefsObject("taskArray"); //$NON-NLS-1$
d1089 41
a1129 5
    /**
     * 
     */
    protected void saveList() {
        List<String> l = new ArrayList<String>();
d1131 6
a1136 3
        for (int i = 0; i < itemCount; i++) {
            String item = (String) model.getElementAt(i);
            l.add(item);
d1138 17
a1154 2
        String[] taskArray =  l.toArray(new String[l.size()]);
        putPrefsObject("taskArray", taskArray); //$NON-NLS-1$
a1171 14
    private static void putPrefsObject(String key, Object object) {
       try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(object);
            oos.flush();
            prefs.putByteArray(key, baos.toByteArray());
        }
        catch (IOException e) {
            e.printStackTrace();
        } 
    }

    
@


1.18
log
@spreadsheet launching support for linux
@
text
@d1193 1
@


1.17
log
@right-click support for linux
@
text
@a53 12
    private final JButton updateButton = new JButton(getIcon("update.gif")) { //$NON-NLS-1$
        private Insets insets = new Insets(0,0,0,0);
        public Insets getInsets() {
            return insets ;
        }
        
        public Point getToolTipLocation(MouseEvent e) {
            Point p = e.getPoint();
            return new Point(getWidth(), p.y + 16);
        }
        
        };
a62 1
    private static final int EXITING_FOR_UPDATE = -2;
a362 1
            cp.add(updateButton);
a366 1
        updateButton.setVisible(false);
a378 6
        updateButton.addActionListener(new AbstractAction() {

            public void actionPerformed(ActionEvent e) {
                update();
            }});
        
d1354 2
a1355 1
    private void shellExec(final String toExec, final String msg, final String title) {
d1357 7
a1363 10
            public void run() {
                try {
                    int retValue = Runtime.getRuntime().exec(new String[] {
                        "rundll32", //$NON-NLS-1$
                        "shell32.dll", //$NON-NLS-1$
                        "ShellExec_RunDLL", //$NON-NLS-1$
                        toExec
                    }).waitFor();
                    if (retValue != 0)
                    {
d1365 6
a1370 4
                            public void run() {
                                JOptionPane.showMessageDialog(Tracker.this, msg, title, JOptionPane.ERROR_MESSAGE);
                            }});
                    }
d1372 2
a1373 1
                catch (final Throwable t) {
d1375 3
a1377 1
                        public void run() {
d1379 2
a1380 1
                        }});
d1383 1
d1387 34
a1639 49
    private void update() {
        try {
            if (webstartInfo.isWebstart()) {
                int retValue = Runtime.getRuntime().exec(new String[] {
                        "rundll32", //$NON-NLS-1$
                        "shell32.dll", //$NON-NLS-1$
                        "ShellExec_RunDLL", //$NON-NLS-1$
                        webstartInfo.AMTinyTimeTracker_jnlp.toString()
                    }).waitFor();
                    if (retValue != 0)
                    {
                        JOptionPane.showMessageDialog(Tracker.this, "Please manually restart the tracker to get the update.", "Unable to Relaunch Tracker", JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$ //$NON-NLS-2$
                    }
                    else {
                        System.exit(EXITING_FOR_UPDATE);
                    }
            }
            else {
                File jarFile = getJarFile();

                Process process = Runtime.getRuntime().exec(new String[] { "cvs", "update", "-p", "-A", jarFile.getName(), }, null, jarFile.getParentFile()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
                new StreamCopier(process.getErrorStream(), System.err);

                InputStream stdout = process.getInputStream();
                File newJarFile = new File(jarFile.getParentFile(), "tracker.new.jar"); //$NON-NLS-1$
                FileOutputStream os = new FileOutputStream(newJarFile);
                byte[] buff = new byte[1024];
                int len;
                while ((len = stdout.read(buff)) >= 0) {
                    os.write(buff, 0, len);
                }

                int retVal = process.waitFor();
                if (retVal != 0)
                    throw new IOException("CVS returned an error code of " + retVal); //$NON-NLS-1$

                // launch another jvm

                process = runJava(new String[] { "-jar", newJarFile.toString(), "-update", "-d", directory.getCanonicalPath()}); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
                StreamCopier.copyProcessStreams(process);
                //System.out.println(process.waitFor());
                System.exit(EXITING_FOR_UPDATE);
            }
        } catch (Throwable e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.toString(), "Update Error", JOptionPane.ERROR_MESSAGE); //$NON-NLS-1$
        }
    }
    
a1719 18
    private Icon getIcon(String name) {
        URL iconResource;

        iconResource = getClass().getResource(name);
        
        Icon icon = new ImageIcon(iconResource);

        int iconSize = 20;

        int width = icon.getIconWidth();
        int height = icon.getIconHeight();

        if (width != iconSize || height != iconSize ) {
            icon = new ImageIcon(((ImageIcon)icon).getImage().getScaledInstance(iconSize, iconSize, java.awt.Image.SCALE_SMOOTH));
        }
        return icon;
    }
    
@


1.16
log
@right-click support for linux
@
text
@a206 2
            boolean popupPending = false;
            
d209 1
a209 13
                if (e.isPopupTrigger())
                {
                    popupPending = true;
                }
                System.out.println("c: " + popupPending);
                if (popupPending) {
                    Point p = new Point(e.getPoint());
                    Component comp = e.getComponent();
                    p.translate(-comp.getX(), -comp.getY());
                    System.out.println("point:" + p);
                    comboPopup.show(comp, p.x, p.y);
                    popupPending = false;
                }
d214 1
a214 5
                if (e.isPopupTrigger())
                {
                    popupPending = true;
                }
                System.out.println("p: " + popupPending);
a216 1
            @@Override
d218 12
a229 3
                if (e.isPopupTrigger())
                {
                    popupPending = true;
a230 1
                System.out.println("r: " + popupPending);
a268 2
            boolean popupPending = false;
            
d270 2
a271 18
            public void mouseClicked(final MouseEvent e) {
                if (e.isPopupTrigger())
                {
                    popupPending = true;
                }
                System.out.println("c: " + popupPending);
                if (popupPending) {
                    SwingUtilities.invokeLater(new Runnable() {

                        public void run() {
                            Point p = new Point(e.getPoint());
                            Component comp = e.getComponent();
                            p.translate(-comp.getX(), -comp.getY());
                            System.out.println("point: " + p);
                            mainPopup.show(comp, p.x, p.y);
                        }});
                    popupPending = false;
                }
d276 1
a276 5
                if (e.isPopupTrigger())
                {
                    popupPending = true;
                }
                System.out.println("p: " + popupPending);
d281 12
a292 3
                if (e.isPopupTrigger())
                {
                    popupPending = true;
a293 1
                System.out.println("r: " + popupPending);
@


1.15
log
@right-click support for linux
@
text
@d283 1
a283 1
            public void mouseClicked(MouseEvent e) {
d290 9
a298 5
                    Point p = new Point(e.getPoint());
                    Component comp = e.getComponent();
                    p.translate(-comp.getX(), -comp.getY());
                    System.out.println("point: " + p);
                    mainPopup.show(comp, p.x, p.y);
a309 8
                if (popupPending) {
                    Point p = new Point(e.getPoint());
                    Component comp = e.getComponent();
                    p.translate(-comp.getX(), -comp.getY());
                    System.out.println("point2: " + p);
                    mainPopup.show(comp, p.x, p.y);
                    popupPending = false;
                }
@


1.14
log
@removed update checking
@
text
@d306 8
@


1.13
log
@right-click support for linux
@
text
@d220 1
d288 1
d293 1
d305 1
d314 1
@


1.12
log
@removed update checking
@
text
@d215 1
d231 1
a231 1
                popupPending = true;
d240 1
a240 1
                popupPending = true;
@


1.11
log
@right-click support for linux
@
text
@a20 2
import java.util.regex.Matcher;
import java.util.regex.Pattern;
a75 1
    private static long updateCheckFrequency = 10 * 60 * 1000;
d442 1
a442 1
            
d447 1
a447 1
            
a1228 1
                updateCheckFrequency = Long.parseLong(args[++i]) * 1000;
a1587 40
    /*
    private static String getCurrentWindowTitle() {
        if (libLoaded) {
            return getCurrentWindowTitle0();
        }
        return null;
    }
    
    // native methods
    private static native String getCurrentWindowTitle0();

    private static boolean libLoaded = false;
    
    static {
        try {
            System.loadLibrary("timetracker");
            libLoaded = true;
        }
        catch (Throwable t) {
            t.printStackTrace();
        }
    }
    */
    
    private static String exec(String[] args, File wd) throws IOException, InterruptedException {
        System.out.println("Running " + Arrays.asList(args)); //$NON-NLS-1$
        Process process = Runtime.getRuntime().exec(args, null, wd);
        ByteArrayOutputStream stdout = new ByteArrayOutputStream();
        ByteArrayOutputStream stderr = new ByteArrayOutputStream();
        new StreamCopier(process.getInputStream(), stdout);
        new StreamCopier(process.getErrorStream(), stderr);
        process.waitFor();
        System.out.println("Done Running " + Arrays.asList(args)); //$NON-NLS-1$
        String retVal = new String(stdout.toByteArray()) + new String(stderr.toByteArray());
        return retVal;
    }

    private static final Pattern cvsLogPattern = Pattern.compile("^-+[\r\n]+revision\\s+([\\d\\.]+)\\s*[\r\n]+date:(.*?);.*?[\r\n]+(.*?)$", Pattern.MULTILINE | Pattern.DOTALL); //$NON-NLS-1$
    private static final Pattern jnlpCodebasePattern = Pattern.compile(".*\\bcodebase\\s*=\\s*\"(.*?)\".*", Pattern.DOTALL); //$NON-NLS-1$
    private static final Pattern jarTimestampPattern = Pattern.compile("(\\d+).*", Pattern.DOTALL); //$NON-NLS-1$
a1615 16
    private String getFileContents(File f) throws IOException {
        FileInputStream fis = new FileInputStream(f);
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buff = new byte[1024];
            int len;
            while ((len=fis.read(buff)) > 0) {
                baos.write(buff, 0, len);
            }
            return new String(baos.toByteArray());
        }
        finally {
            fis.close();
        }
    }
    
a1634 1
    private String runningRevision;
a1636 144
    private void checkForUpdates() {
        try {
            File jarFile = getJarFile();
            if (jarFile == null) {
                System.out.println("Can't find jar file"); //$NON-NLS-1$
                return;
            }
            boolean outOfDate = false;
            
            boolean webstart = webstartInfo.isWebstart();
            if (webstart) {
                
                String jnlpContents = getFileContents(webstartInfo.AMTinyTimeTracker_jnlp);
                Matcher m = jnlpCodebasePattern.matcher(jnlpContents);
                if (m.matches()) {
                    String codebase = m.group(1);
                    if (!codebase.endsWith("/")) codebase += "/"; //$NON-NLS-1$ //$NON-NLS-2$
                    URL jarUrl = new URL(codebase + "tracker.jar"); //$NON-NLS-1$

                    jarFile = new File(jarUrl.toURI());

                    long modified = jarFile.lastModified();
                    
                    if (modified == 0) {
                        System.out.println("Unable to determine last modified time for " + jarUrl); //$NON-NLS-1$
                        return;
                    }
                    
                    String rtTrackerContents = getFileContents(webstartInfo.RTTinyTimeTracker_jar);
                    m = jarTimestampPattern.matcher(rtTrackerContents);
                    if (m.matches()) {
                        long jnlpCacheDate = Long.parseLong(m.group(1));
                        // change jar file
                        if (jarUrl.getProtocol().equals("file")) { //$NON-NLS-1$
                            // see if we're out of date
                            outOfDate = jnlpCacheDate < modified;
                        }
                    }
                    else {
                        System.out.println("Doesn't match " + rtTrackerContents); //$NON-NLS-1$
                    }
                }
                else {
                    System.out.println("Doesn't match " + jnlpCodebasePattern); //$NON-NLS-1$
                }
            }
            
            List<String> changes = new ArrayList<String>();
            if (new File(jarFile.getParentFile(),"CVS").isDirectory()) { //$NON-NLS-1$
                // It's CVS
                CVSStatus cvsStatus; 
                if (runningRevision == null || outOfDate && webstart) {
                    try {
                        cvsStatus = new CVSStatus(jarFile);
                        if (runningRevision == null) runningRevision = cvsStatus.workingRevision;
                    }
                    catch (Throwable t) {
                        cvsStatus = null;
                        t.printStackTrace();
                    }
                }
                else {
                    cvsStatus = null;
                }
                
                if ( cvsStatus != null && (outOfDate || cvsStatus.status.equals("Needs Patch") || cvsStatus.status.equals("Needs Checkout"))) { //$NON-NLS-1$ //$NON-NLS-2$
                    outOfDate = true;
                    String cvsLog = exec(new String[] {
                            "cvs", //$NON-NLS-1$
                            "log", //$NON-NLS-1$
                            jarFile.getName(),
                    }, jarFile.getParentFile());
                    
                    Matcher logMatcher = cvsLogPattern.matcher(cvsLog);
                    
                    boolean commentsApply = !webstart;
                    while (logMatcher.find()) {
                        String version = logMatcher.group(1);
                        //String date = logMatcher.group(2).trim() + " GMT";
                        //Date d = cvsDateFormat.parse(date);
                        if (!commentsApply) {
                            System.out.println("Working Revision: " + cvsStatus.workingRevision + " " + version); //$NON-NLS-1$ //$NON-NLS-2$
                            if (cvsStatus.workingRevision.equals(version)) commentsApply = true;
                        }
                        if (runningRevision == null || version.equals(runningRevision) ) {
                            break;
                        }
                        if (commentsApply) {
                            String comment = logMatcher.group(3);
                            changes.add(0, comment);
                        }
                    }
                }
            }
            
            if (outOfDate) {
                StringBuffer tooltip = new StringBuffer("<html><h3>There is a new version available</h3><p>Press the button to get the update<br><br></p>"); //$NON-NLS-1$
                if (changes.size() > 0) {
                    tooltip.append("<p><u>Changes</u><ul>"); //$NON-NLS-1$
                    for (Iterator iter = changes.iterator(); iter.hasNext();) {
                        String comment = (String) iter.next();
                        tooltip.append("<li>" + comment + "</li>"); //$NON-NLS-1$ //$NON-NLS-2$
                    }
                    tooltip.append("</ul></p>"); //$NON-NLS-1$
                }
                tooltip.append("</html>"); //$NON-NLS-1$
                updateButton.setVisible(true);
                pack();
                updateButton.setToolTipText(tooltip.toString());
                
            }
        }
        catch (Throwable t) {
            t.printStackTrace();
        }
    }
    
    private static class CVSStatus {
        private String status, workingRevision;
        private static final Pattern cvsStatusPattern = Pattern.compile(".*Status:\\s*(.*?)$.*Working revision:\\s+([\\d\\.]+).*", Pattern.MULTILINE | Pattern.DOTALL); //$NON-NLS-1$
        
        /**
         * @@param status
         * @@param workingRevision
         * @@throws IOException
         * @@throws InterruptedException
         */
        public CVSStatus(File f) throws IOException, InterruptedException {
            String cvsStatus = exec(new String[] {
                    "cvs", //$NON-NLS-1$
                    "status", //$NON-NLS-1$
                    f.getName(),
            }, f.getParentFile());
            Matcher m = cvsStatusPattern.matcher(cvsStatus);
            if (m.matches()) {
                status = m.group(1).trim();
                workingRevision = m.group(2).trim();
            }
            else {
                throw new IOException("Output doesn't match " + cvsStatusPattern + "\r\n" + cvsStatus); //$NON-NLS-1$ //$NON-NLS-2$
            }
        }
    }
    
@


1.10
log
@right-click support for linux
@
text
@d210 2
d214 11
a224 1
                handleEvent(e);
d229 5
a233 1
                handleEvent(e);
d236 1
d238 3
a240 13
                handleEvent(e);
            }

            /**
             * @@param e the event to handle
             */
            private void handleEvent(MouseEvent e) {
                System.out.println(e.isPopupTrigger() + ", " + e);
                if (e.isPopupTrigger()) {
                    Point p = new Point(e.getPoint());
                    Component comp = e.getComponent();
                    p.translate(-comp.getX(), -comp.getY());
                    comboPopup.show(comp, p.x, p.y);
d242 1
a244 1
        
d281 1
d285 11
a295 1
                handleEvent(e);
d300 4
a303 1
                handleEvent(e);
d308 3
a310 14
                handleEvent(e);
            }

            /**
             * @@param mainPopup
             * @@param e
             */
            private void handleEvent(MouseEvent e) {
                System.out.println(e.isPopupTrigger());
                if (e.isPopupTrigger()) {
                    Point p = new Point(e.getPoint());
                    Component comp = e.getComponent();
                    p.translate(-comp.getX(), -comp.getY());
                    mainPopup.show(comp, p.x, p.y);
@


1.9
log
@right-click support for linux
@
text
@d295 1
a295 1
                System.out.println(e.isPopupTrigger() + ", " + e);
@


1.8
log
@right-click support for linux
@
text
@d274 12
d287 9
a301 1
                
@


1.7
log
@right-click support for linux
@
text
@d228 1
@


1.6
log
@fixed russian problem, fixed deadlock
@
text
@d210 10
d221 7
a233 1
                
@


1.5
log
@fixed extraLabel hiding logic
@
text
@d30 2
d81 1
d84 1
d89 2
d102 2
d409 19
a427 1
        return dowFormat.format(calendar.getTime());
d464 18
a481 14
    private synchronized void eatIntoPreviousTask(int minutes) {
        try {
            TimecardSpreadsheet timecard = new TimecardSpreadsheet(System.currentTimeMillis());
            boolean[] beep = new boolean[1];
            TaskRow otherAffectedTask = timecard.moveLastSwitch(minutes * 60, beep);
            if (beep[0]) {
                beep();
            }
            else {
                long currentTaskDailyTotal = timecard.save();

                if (otherAffectedTask != null) {
                    setExtraText(otherAffectedTask.getTask() + ": " +  //$NON-NLS-1$
                    formatTime(Math.round(otherAffectedTask.getDurationMillis() / 1000f)));
d483 2
a484 1
                showTime(currentTaskDailyTotal);
a485 2
        } catch (Exception e) {
            setLabel(e);
a486 1
        
d497 6
a502 3
    private synchronized void setLabel(String text) {
        timeLabel.setText(" " + text); //$NON-NLS-1$
        pack();
d529 10
a538 16
    private synchronized void tick(long scheduledExecutionTime, long nextExecutionTime) {
        try {

            String currentTask = getCurrentTask();
            if (currentTask.length() == 0) {
                setLabel("     "); //$NON-NLS-1$
                return;
            }
            
            calendar.setTimeInMillis(scheduledExecutionTime);
            int thisDay = calendar.get(Calendar.DAY_OF_WEEK);
            calendar.setTimeInMillis(nextExecutionTime);
            int nextDay = calendar.get(Calendar.DAY_OF_WEEK);
            
            // see if we should log or we should wait til the next one
            if (System.currentTimeMillis() < nextExecutionTime || thisDay != nextDay) {
d540 4
a543 1
                //System.out.println("Current Task: " + currentTask);
d545 11
a555 1
                TimecardSpreadsheet timecard = new TimecardSpreadsheet(scheduledExecutionTime);
a556 1
                timecard.tick(currentTask);
d558 2
a559 1
                showTime(timecard.save());
a560 4
            
            
        } catch (Exception e) {
            setLabel(e);
a1172 5
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Throwable e) {}
        autoStartCheckBox = new JCheckBoxMenuItem(Messages.getString("Tracker.StartTrackerOnWindowsStartup")); //$NON-NLS-1$
d1190 4
d1199 5
d1218 2
@


1.4
log
@localized
@
text
@d80 1
d280 4
d386 3
a1389 1
            hideExtraText();
d1903 1
@


1.3
log
@latest
@
text
@d52 1
a52 1
    private final JLabel timeLabel = new JLabel("    ");
d54 1
a54 1
    private final JButton updateButton = new JButton(getIcon("update.gif")) {
d68 1
a68 1
    private DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
d70 3
a72 1
    private static final String enterTaskHere = "<Enter Task Here>";
d78 2
d82 13
a94 1
        super((JFrame)null, "Tracker");
d103 1
d105 1
a105 1
        cp.setToolTipText("<html> - Double-click for time card<br> - Drag to move<br> - Scroll or Shift-Scroll to adjust task time<br> - Right-click for more options</html>");
d113 1
d115 1
d120 1
a120 1
        String[] taskArray = (String[]) getPrefsObject("taskArray");
d149 1
a149 1
        comboPopup.add(new AbstractAction("Remove From Dropdown") {
a153 4
//        comboPopup.add(new AbstractAction("Rename Task") {
//            public void actionPerformed(ActionEvent e) {
//                renameTask();
//            }});
d215 1
a215 1
        AbstractAction openTimecardAction = new AbstractAction("Open Timecard") {
d220 1
a220 1
        AbstractAction openAllTimecardsAction = new AbstractAction("View All Timecards") {
d241 1
a241 1
        mainPopup.add(new AbstractAction("Exit") {
d281 1
a281 1
                if (e.getActionCommand().equals("comboBoxEdited")) {
d330 1
a330 1
            cp.add(new JLabel("Updating..."));
d342 2
a343 2
        int lx = prefs.getInt("window.x", 0);
        int ly = prefs.getInt("window.y", 0);
d376 1
a376 1
                        wp = (WindowPeer)Component.class.getMethod("getPeer").invoke(Tracker.this);
d391 5
d442 1
a442 1
                    setExtraText(otherAffectedTask.getTask() + ": " + 
d462 1
a462 1
        timeLabel.setText(" " + text);
d495 1
a495 1
                setLabel("     ");
a533 3
        private final String[] dow = new String[] {
                "Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"
        };
d543 1
a543 1
            tmpFile = new File(f.toString() + ".tmp");
d545 2
a546 2
            String elapsedTimeFormatString = "[h]:mm";
            String hmsFormatString = "h:mm:ss";
d551 1
a551 1
                timecardSheet = wb.createSheet("Timecard");
d561 2
a562 2
                createCell(row, "Task", headerStyle);
                createCell(row, "Total", headerStyle);
d578 9
a586 9
                createCell(row2, "Daily Totals", underlineTimeStyle);
                createFormulaCell(row2, "SUM(C2:I2)", underlineTimeStyle);
                createFormulaCell(row2, "SUM(C3:C10000)", underlineTimeStyle);
                createFormulaCell(row2, "SUM(D3:D10000)", underlineTimeStyle);
                createFormulaCell(row2, "SUM(E3:E10000)", underlineTimeStyle);
                createFormulaCell(row2, "SUM(F3:F10000)", underlineTimeStyle);
                createFormulaCell(row2, "SUM(G3:G10000)", underlineTimeStyle);
                createFormulaCell(row2, "SUM(H3:H10000)", underlineTimeStyle);
                createFormulaCell(row2, "SUM(I3:I10000)", underlineTimeStyle);
d646 1
a646 1
                    if (cell.getStringCellValue().equals("Task")) {
d650 1
a650 1
                    else if (cell.getStringCellValue().equals("Total")) {
d657 2
a658 2
            if (taskColumn == -1) throw new IOException("Can't find the task column.");
            if (totalTimeColumn == -1) throw new IOException("Can't find the time column.");
d722 4
a725 4
            createCell(headingRow, "Task", headerStyle);
            createCell(headingRow, "Start", headerStyle);
            createCell(headingRow, "End", headerStyle);
            createCell(headingRow, "Duration", headerStyle);
d792 1
a792 1
                createFormulaCell(newRow, "C" + (newRowNum+1) + "-" + "B" + (newRowNum+1), elapsedTimeStyle);
d849 1
a849 1
                createFormulaCell(nextAvailableRow, "SUM(" + sunday + ":" + saturday + ")", elapsedTimeStyle);
d855 1
a855 1
                    String formula = "SUMIF('"+day+"'!A1:A65000,\""+task+"\",'"+day+"'!D1:D65000)";
d1016 1
a1016 1
            return task + " " + start + " - " + end;
d1035 1
a1035 1
        return new File(directory, "timecard." + dateString + ".xls");
d1049 1
a1049 1
        putPrefsObject("taskArray", taskArray);
d1124 1
a1124 1
        if (item == null) return "";
d1126 1
a1126 1
        if (currentTask.equals(enterTaskHere)) return "";
d1135 2
a1136 2
        autoStartCheckBox = new JCheckBoxMenuItem("Start Tracker on Windows Startup");
        String dirName = System.getProperty("user.home") + "/timecards";
d1141 1
a1141 1
            if (arg.equals("-d")) {
d1144 1
a1144 1
            else if (arg.equals("-update")) {
d1147 1
a1147 1
            else if (arg.equals("-update-check-frequency")) {
d1150 1
a1150 1
            else if (arg.equals("-console")) {
d1154 1
a1154 1
                System.out.println("Unrecognized argument " + arg);
d1162 2
a1163 2
            File stdOutFile = new File(directory, "stdout.log");
            File stdErrFile = new File(directory, "stderr.log");
d1179 1
a1179 1
        boolean installed = prefs.getBoolean("installed", false);
d1182 1
a1182 1
            prefs.putBoolean("installed", true);
d1198 1
a1198 1
                System.out.println("Not installing, not webstart");
d1235 1
a1235 1
    private static String jnlpName = "tinytimetracker.jnlp";
d1238 4
a1241 4
        String os = System.getProperty("os.name");
        System.out.println("os: " + os);
        if (!os.startsWith("Windows")) return null;
        return new File(System.getProperty("user.home") + "\\Start Menu\\Programs\\Startup");
d1254 1
a1254 1
        System.err.println("Usage: tracker.Tracker [-d <timecard directory>]");
d1293 1
a1293 1
        shellExec(getWeekFile(System.currentTimeMillis()).getAbsolutePath(), "There was an error viewing the file.  It's possible you don't have Excel installed.", "Error Viewing File");
d1296 1
a1296 1
        shellExec(getWeekFile(System.currentTimeMillis()).getParentFile().getAbsolutePath(), "There was an error viewing the timecard directory.", "Error Opening Timecard Directory");
d1304 3
a1306 3
                        "rundll32",
                        "shell32.dll",
                        "ShellExec_RunDLL",
d1354 2
a1355 2
            prefs.putInt("window.x", newLocation.x);
            prefs.putInt("window.y", newLocation.y);
d1523 1
a1523 1
        System.out.println("Running " + Arrays.asList(args));
d1530 1
a1530 1
        System.out.println("Done Running " + Arrays.asList(args));
d1535 3
a1537 3
    private static final Pattern cvsLogPattern = Pattern.compile("^-+[\r\n]+revision\\s+([\\d\\.]+)\\s*[\r\n]+date:(.*?);.*?[\r\n]+(.*?)$", Pattern.MULTILINE | Pattern.DOTALL);
    private static final Pattern jnlpCodebasePattern = Pattern.compile(".*\\bcodebase\\s*=\\s*\"(.*?)\".*", Pattern.DOTALL);
    private static final Pattern jarTimestampPattern = Pattern.compile("(\\d+).*", Pattern.DOTALL);
d1539 1
a1539 1
    private static String javawExe = System.getProperty("java.home") + File.separatorChar + "bin" + File.separatorChar + "javaw";
d1549 1
a1549 1
                if (url.startsWith("jar:")) {
d1553 1
a1553 1
                            url = url.substring(0, 9) + "/" + url.substring(9);
d1592 2
a1593 2
            AMTinyTimeTracker_jnlp = new File(jarFile.getParentFile(), "AMtinytimetracker.jnlp");
            RTTinyTimeTracker_jar = new File(jarFile.getParentFile(), "RTtinytimetracker.jar");
d1608 1
a1608 1
                System.out.println("Can't find jar file");
d1620 2
a1621 2
                    if (!codebase.endsWith("/")) codebase += "/";
                    URL jarUrl = new URL(codebase + "tracker.jar");
d1628 1
a1628 1
                        System.out.println("Unable to determine last modified time for " + jarUrl);
d1637 1
a1637 1
                        if (jarUrl.getProtocol().equals("file")) {
d1643 1
a1643 1
                        System.out.println("Doesn't match " + rtTrackerContents);
d1647 1
a1647 1
                    System.out.println("Doesn't match " + jnlpCodebasePattern);
d1652 1
a1652 1
            if (new File(jarFile.getParentFile(),"CVS").isDirectory()) {
d1669 1
a1669 1
                if ( cvsStatus != null && (outOfDate || cvsStatus.status.equals("Needs Patch") || cvsStatus.status.equals("Needs Checkout"))) {
d1672 2
a1673 2
                            "cvs",
                            "log",
d1685 1
a1685 1
                            System.out.println("Working Revision: " + cvsStatus.workingRevision + " " + version);
d1700 1
a1700 1
                StringBuffer tooltip = new StringBuffer("<html><h3>There is a new version available</h3><p>Press the button to get the update<br><br></p>");
d1702 1
a1702 1
                    tooltip.append("<p><u>Changes</u><ul>");
d1705 1
a1705 1
                        tooltip.append("<li>" + comment + "</li>");
d1707 1
a1707 1
                    tooltip.append("</ul></p>");
d1709 1
a1709 1
                tooltip.append("</html>");
d1723 1
a1723 1
        private static final Pattern cvsStatusPattern = Pattern.compile(".*Status:\\s*(.*?)$.*Working revision:\\s+([\\d\\.]+).*", Pattern.MULTILINE | Pattern.DOTALL);
d1733 2
a1734 2
                    "cvs",
                    "status",
d1743 1
a1743 1
                throw new IOException("Output doesn't match " + cvsStatusPattern + "\r\n" + cvsStatus);
d1752 3
a1754 3
                        "rundll32",
                        "shell32.dll",
                        "ShellExec_RunDLL",
d1759 1
a1759 1
                        JOptionPane.showMessageDialog(Tracker.this, "Please manually restart the tracker to get the update.", "Unable to Relaunch Tracker", JOptionPane.ERROR_MESSAGE);
d1768 1
a1768 1
                Process process = Runtime.getRuntime().exec(new String[] { "cvs", "update", "-p", "-A", jarFile.getName(), }, null, jarFile.getParentFile());
d1772 1
a1772 1
                File newJarFile = new File(jarFile.getParentFile(), "tracker.new.jar");
d1782 1
a1782 1
                    throw new IOException("CVS returned an error code of " + retVal);
d1786 1
a1786 1
                process = runJava(new String[] { "-jar", newJarFile.toString(), "-update", "-d", directory.getCanonicalPath()});
d1793 1
a1793 1
            JOptionPane.showMessageDialog(this, e.toString(), "Update Error", JOptionPane.ERROR_MESSAGE);
d1829 1
a1829 1
                    throw new Exception("Unable to get write lock on file " + jarFile + " for update");
d1833 1
a1833 1
            Process p = Runtime.getRuntime().exec(new String[] { "cvs", "update", "-A", }, null, jarFile.getParentFile().getParentFile());
d1837 1
a1837 1
                throw new Exception("CVS update returned with error code " + retVal);
d1842 1
a1842 1
            JOptionPane.showMessageDialog(null, e.toString(), "CVS update failed.  Will attempt to restart tracker.", JOptionPane.ERROR_MESSAGE);
d1846 1
a1846 1
        File updatedJar = new File(jarFile.getParentFile(), "tracker.jar");
d1849 1
a1849 1
            Process p = runJava(new String[] { "-jar", updatedJar.toString(), "-d", dirName});
d1854 1
a1854 1
            JOptionPane.showMessageDialog(null, e.toString(), "Unable to restart tracker.", JOptionPane.ERROR_MESSAGE);
d1866 1
a1866 1
            m = cl.getClass().getMethod("findResource", new Class[] {String.class});
d1869 1
a1869 1
            String path = name.replace('.', '/').concat(".class");
d1896 1
a1896 1
        extraLabel.setText("     " + text + " ");
@


1.2
log
@added autostart checkbox
@
text
@d88 1
a88 1
        cp.setToolTipText("<html> - Double-click for time card<br> - Drag to move<br> - Right-click for more options</html>");
@


1.1
log
@initial checkin
@
text
@d83 4
d88 2
d130 1
a130 1
        comboPopup.add(new AbstractAction("Remove") {
d210 3
a212 1
        mainPopup.add(openTimecardAction);
d215 11
d1118 1
d1162 5
a1166 1
        install();
d1169 13
a1181 15
    /**
     * Make it so it starts when the user logs in
     */
    private static void install() {
        File startupFolder = getStartupFolder();
        System.out.println("Startup folder is " + startupFolder);
        if (startupFolder == null) return;
        if (webstartInfo.isWebstart()) {
            System.out.println("Is webstart: Installing");
            File jnlpStartupFile = new File(startupFolder, "tracker.jnlp");
            System.out.println("Installing to " + jnlpStartupFile);
            try {
                copyFile(jnlpStartupFile, webstartInfo.AMTracker_jnlp);
            } catch (IOException e) {
                e.printStackTrace();
d1185 1
a1185 1
            System.out.println("Not installing, not webstart");
d1187 1
d1189 1
a1189 1

d1218 2
d1227 6
d1566 1
a1566 1
        File AMTracker_jnlp, RTTracker_jar;
d1575 2
a1576 2
            AMTracker_jnlp = new File(jarFile.getParentFile(), "AMtracker.jnlp");
            RTTracker_jar = new File(jarFile.getParentFile(), "RTTracker.jar");
d1580 1
a1580 1
            return AMTracker_jnlp != null && AMTracker_jnlp.isFile() && RTTracker_jar != null && RTTracker_jar.isFile();
d1585 1
d1599 1
a1599 1
                String jnlpContents = getFileContents(webstartInfo.AMTracker_jnlp);
d1615 1
a1615 1
                    String rtTrackerContents = getFileContents(webstartInfo.RTTracker_jar);
d1738 1
a1738 1
                        webstartInfo.AMTracker_jnlp.toString()
@

