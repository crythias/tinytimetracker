head	1.2;
access;
symbols;
locks
	gyoung:1.2; strict;
comment	@# @;


1.2
date	2007.06.15.05.31.18;	author rblack;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.14.20.12.44;	author afuqua;	state Exp;
branches;
next	;


desc
@@


1.2
log
@removed unused variable
@
text
@package tracker;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;

import junit.framework.TestCase;;

public class MultipleInstancesLockTest extends TestCase {
    MultipleInstancesLock lock;
    
    public void setUp() throws IOException {
        File fileToLock = File.createTempFile("TinyTimeTracker", "lock");
        lock = new MultipleInstancesLock(fileToLock);
    }
    
    public void testPreventMultipleInstances_notOverlapping() throws IOException, MultipleInstancesException {
        lock.preventMultipleInstances();
        lock.allowOtherInstances();
        lock.preventMultipleInstances();
        lock.allowOtherInstances();
    }
    
    public void testPreventMultipleInstances_Overlapping() throws IOException, MultipleInstancesException {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        System.setErr(new PrintStream(stream));
        
        lock.preventMultipleInstances();
        try {
            assertEquals(0, stream.size());
            lock.preventMultipleInstances();
            fail();
        } catch(MultipleInstancesException expected) {
            if (stream.size() == 0) {
                fail();
            }
        }
    }
    
}
@


1.1
log
@prevent multiple instances of tiny time tracker from running at the same time
@
text
@a28 1
        File fileToLock = File.createTempFile("TinyTimeTracker", "lock");
@

