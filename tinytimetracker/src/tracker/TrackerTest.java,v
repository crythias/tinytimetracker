head	1.4;
access;
symbols;
locks
	gyoung:1.4; strict;
comment	@# @;


1.4
date	2007.06.13.04.07.51;	author rblack;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.13.04.07.10;	author rblack;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.11.14.18.58;	author afuqua;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.09.02.15.34;	author afuqua;	state Exp;
branches;
next	;


desc
@@


1.4
log
@removed commented-out code
@
text
@package tracker;

import java.util.Calendar;
import java.util.Locale;
import java.util.prefs.Preferences;

import javax.swing.JCheckBoxMenuItem;

import junit.framework.TestCase;

public class TrackerTest extends TestCase {
    Tracker tracker;
    
    public void setUp() throws Exception {
        tracker = new Tracker(Preferences.userNodeForPackage(Tracker.class).node("test"));
    }

    public void tearDown() throws Exception {
        Preferences.userNodeForPackage(Tracker.class).node("test").clear();
    }

    public void testParseArguments_All() {
        String[] args = { "-update", "-d", "fooDirectory", "-console", 
                "-update-check-frequency", "5", "-locale", "fooLocale"};
        tracker.parseArguments(args);
        assertTrue( tracker.logToConsole );
        assertEquals( "fooDirectory", tracker.dirName );
        assertEquals( new Locale("fooLocale"), Locale.getDefault() );        
    }
    
    public void testParseArguments_None() {
        Object defaultLocale = Locale.getDefault();
        String[] args = { };
        tracker.parseArguments(args);
        assertFalse( tracker.logToConsole );
        assertEquals( System.getProperty("user.home") + "/timecards", tracker.dirName );
        assertEquals(defaultLocale , Locale.getDefault());        
    } 
    
    public void testSetupLogging() { // TODO
    }
    
    public void testInstall_AlreadyInstalled_WithoutAutostart() {
        tracker.prefs.putBoolean("installed", true);
        
        tracker.install(null); // must change firstDayOfWeek if it's not already set
        assertEquals(Calendar.SUNDAY, tracker.prefs.getInt("firstDayOfWeek", -1));

        tracker.prefs.putInt("firstDayOfWeek", Calendar.FRIDAY);
        tracker.install(null); // must not change firstDayOfWeek if it's already set
        assertEquals(Calendar.FRIDAY, tracker.prefs.getInt("firstDayOfWeek", -1));
    }
    
    public void testInstall_NotAlreadyInstalled_WithoutAutostart() {
        tracker.install(null);
        assertTrue( tracker.prefs.getBoolean("installed", false) );
        assertEquals( Calendar.getInstance().getFirstDayOfWeek(), 
                tracker.prefs.getInt("firstDayOfWeek", -1) ); 
    }
        
    public void testInstall_NotAlreadyInstalled_WithAutostart() {
        MockAutoStart mockAutoStart = new MockAutoStart();
        tracker.install( mockAutoStart );
        assertTrue( mockAutoStart.autoStartCalled );
        assertTrue( mockAutoStart.autoStartValue );
    }
    
    public void testInstall_AlreadyInstalled_WithAutostart() {
        tracker.prefs.putBoolean("installed", true);
        MockAutoStart mockAutoStart = new MockAutoStart();
        
        tracker.install( mockAutoStart );
        assertFalse( mockAutoStart.autoStartCalled );
    }    
    
    public class MockAutoStart implements AutoStart {
        public boolean autoStartCalled = false;
        public boolean autoStartValue = false;
        public void autoStart(boolean autoStart) {
            autoStartCalled = true;
            this.autoStartValue = autoStart;
        }
        public JCheckBoxMenuItem getAutoStartCheckBox() {
            return null;
        }
    }
}
@


1.3
log
@removed placeholder class, using Preferences.node instead
@
text
@a18 1
        //Preferences.userRoot().
@


1.2
log
@OOPS! my test was blowing away my preferences. I fixed that.
I also added an excludes to the build.xml to keep the test code out of the jar.
@
text
@d15 1
a15 1
        tracker = new Tracker(Preferences.userNodeForPackage(tracker.test.PlaceHolder.class));
d19 2
a20 1
        Preferences.userNodeForPackage(tracker.test.PlaceHolder.class).clear();
@


1.1
log
@refactored Tracker.java:
-- extracted most of the UI stuff to TimeTracker.java,
-- extracted the jnlp/autostart stuff to AutoStartManager.java, and
-- left most of the main()/start-up stuff in Tracker.java
-- refactored Tracker.java for testability
-- write a unit test for most of the stuff in Tracker.java
@
text
@d5 1
a5 2
import java.util.prefs.AbstractPreferences;
import java.util.prefs.BackingStoreException;
d15 1
a15 1
        tracker = new Tracker();
d19 1
a19 1
        MockAbstractPreferences.userNodeForPackage(TrackerTest.class).clear();
a43 1
        tracker.prefs = MockAbstractPreferences.userNodeForPackage(TrackerTest.class);
a54 2
        tracker.prefs = MockAbstractPreferences.userNodeForPackage(TrackerTest.class);
        
a68 1
        tracker.prefs = MockAbstractPreferences.userNodeForPackage(TrackerTest.class);
a86 32
    
    /**
     * This is to prevent the test from actually writing to or reading from 
     * the real OS preferences.
     */
    private class MockAbstractPreferences extends AbstractPreferences {
        protected MockAbstractPreferences(AbstractPreferences parent, String name) {
            super(parent, name);
        }
        protected AbstractPreferences childSpi(String name) {
            return null;
        }
        protected String[] childrenNamesSpi() throws BackingStoreException {
            return null;
        }
        protected void flushSpi() throws BackingStoreException {
        }
        protected String getSpi(String key) {
            return null;
        }
        protected String[] keysSpi() throws BackingStoreException {
            return null;
        }
        protected void putSpi(String key, String value) {
        }
        protected void removeNodeSpi() throws BackingStoreException {
        }
        protected void removeSpi(String key) {
        }
        protected void syncSpi() throws BackingStoreException {
        }
    }
@

