import com.github.jk1.license.render.*
import com.github.jk1.license.importer.*
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import com.github.jk1.license.importer.XmlReportImporter
import com.github.jk1.license.filter.LicenseBundleNormalizer

// SPDX-License-Identifier: GPL-2.0-only

plugins {
    id 'java'
    id 'application'
    id "com.github.jk1.dependency-license-report" version "2.9"
}

licenseReport {
    outputDir = "$buildDir/reports/licenses"
    renderers = [
        new JsonReportRenderer(),
        new InventoryHtmlReportRenderer('license-report.html', 'Backend')
    ]
    configurations = ALL
}

task printDependencies {
    doLast {
        configurations.compileJava.allDependencies*.each { Dependency dep ->
            println "${dep.getClass().simpleName}[${dep.getClass().interfaces*.simpleName.join(', ')}] group[$dep.group] name[$dep.name] $dep"
        }
    }
}

task printResolvedFiles {
    doLast {
        def resolved = configurations.compileiJava.resolvedConfiguration
        resolved.firstLevelModuleDependencies.each { ResolvedDependency resolvedDep ->
            resolvedDep.moduleArtifacts.each { println "$it.name - $it.classifier - $it.type: $it.file" }
        }
    }
}
def versionProps = new Properties()
file("../VERSION").withInputStream { stream ->
  versionProps.load(stream)
}

version = versionProps.getProperty("version", "0.0.0")
group = "org.tinytimetracker"

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2' // test
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2' // test platform launcher    implementation 'org.apache.poi:poi:5.4.1'         // HSSF (.xls)
    implementation("org.apache.poi:poi:5.4.1")
    implementation("commons-io:commons-io:2.13.0")
    implementation("org.apache.logging.log4j:log4j-api:2.20.0")
    implementation("org.apache.logging.log4j:log4j-core:2.20.0")
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
            exclude '**/*Test.java'
        }
        resources {
            srcDirs = ['src/main/resources']
            include '**/*.ico', '**/*.gif', '**/*.jpg', '**/*.png', '**/*.properties', '**/log4j2.xml'
        }
    }
}

application {
    mainClass.set("tracker.Tracker")
}

tasks.jar {
    manifest {
        attributes(
                'Main-Class': 'tracker.Tracker'
        )
    }
}

task beforeCommit {
    group = 'verification'
    description = 'Clean build, clean again, and update licenses before commit. This is to not distribute binaries and confirm a good build.'

    doLast {
        exec {
            commandLine './gradlew', 'clean', 'build', 'clean', 'updateLicenses'
        }
    }
}

tasks.create('runTracker', JavaExec) {
    group = 'application'
    description = 'Runs TinyTimeTracker'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'tracker.Tracker'
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}


test {
    useJUnitPlatform()
}
